@using System.Globalization
@using Interfaces

@inject IAppState _appState

@if (Title is not null)
{
    <h3>@Title</h3>
}

<div class="calendar-container">
    <div class="calendar-nav">
        <button class="btn btn-info" @onclick="ShowPrevMonth" disabled="@isPrevDisabled">Prev</button>
        <span class="calendar-title">@pageDate.Year. @pageDate.ToString("MMMM") </span>
        <button class="btn btn-info" @onclick="ShowNextMonth" disabled="@isNextDisabled">Next</button>
    </div>

    <div class="calendar-grid day-header-row">
        @foreach (var dayName in DayNames)
        {
            <div class="day-header">
                @dayName
            </div>
        }
    </div>

    <div class="calendar-grid">
        @foreach (var day in calendarDays)
        {
            <div class=
                "
                calendar-day 
                @(day.Date == DateTime.Today ? "today" : 
                day.Date == firstDate ? "reg-day" :
                day.Month == pageDate.Month ? "current-month" : "other-month") 
                @(SpecialDates.Any(d => d.Date == day.Date) ? "special" : "")
                @(day.Date < firstDate || day.Date > DateTime.Today ? "unclickable" : "")
                "
                @onclick="() => OnDayClick(day)">
                @day.Day
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string? Title { get; set; }
    [Parameter] public Func<Task>? RerenderParent { get; set; }
    [Parameter] public List<DateTime> SpecialDates { get; set; }
    [Parameter] public Func<DateTime, Task>? OnDayClickAction { get; set; }
    public DateTime CalendarDate { get { return pageDate; } }

    private DateTime pageDate;
    private List<DateTime> calendarDays;
    private string[] DayNames;

    private DateTime firstDate;
    private bool isPrevDisabled => new DateTime(pageDate.Year, pageDate.Month, 1) <= firstDate;
    private bool isNextDisabled => new DateTime(pageDate.AddMonths(1).Year, pageDate.AddMonths(1).Month, 1) > DateTime.Today;

    public Calendar()
    {
        pageDate = DateTime.Now;
        calendarDays = new List<DateTime>();

        // Starts on Monday instead of Sunday
        DayNames = CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames
       .Skip(1)
       .Concat(CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames.Take(1))
       .ToArray();

        SpecialDates = new List<DateTime>();
    }

    protected override void OnInitialized()
    {
        firstDate = _appState.CurrentUser.RegistrationDate;
        GenerateCalendar();
    }

    private void GenerateCalendar()
    {
        calendarDays.Clear();
        var firstDayOfMonth = new DateTime(pageDate.Year, pageDate.Month, 1);
        var dayOfWeek = (int)firstDayOfMonth.DayOfWeek;

        // Get the start date for the calendar, starting on Monday
        if (dayOfWeek == 0)
            dayOfWeek = 7;

        var startDate = firstDayOfMonth.AddDays(-dayOfWeek + 1);

        // Fill the calendar with 42 days (6 weeks)
        for (int i = 0; i < 42; i++)
        {
            calendarDays.Add(startDate.AddDays(i));
        }

    }

    private async Task ShowPrevMonth()
    {
        pageDate = pageDate.AddMonths(-1);
        GenerateCalendar();
        if (RerenderParent is not null)
            await InvokeAsync(RerenderParent);
    }

    private async Task ShowNextMonth()
    {
        pageDate = pageDate.AddMonths(1);
        GenerateCalendar();
        if (RerenderParent is not null)
            await InvokeAsync(RerenderParent);
    }

    private async Task OnDayClick(DateTime day)
    {
        if(day.Date >= firstDate && day.Date <= DateTime.Today)
        {
            if (OnDayClickAction is not null)
            {
                await OnDayClickAction.Invoke(day);
                GenerateCalendar();
            }
        }
    }
}

<style>
    .calendar-container {
        max-width: 350px;
        margin: auto;
        border: 1px solid #ddd;
        padding: 16px;
        border-radius: 8px;
        background-color: white;
    }

    .calendar-nav {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 8px;
        font-size: 1.25rem;
    }

    .calendar-title {
        font-weight: bold;
        text-align: center;
    }

    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 5px;
    }

    .day-header-row {
        font-weight: bold;
        background-color: lightgray;
        text-align: center;
        padding: 4px 0;
    }

    .day-header {
        width: 40px;
        text-align: center;
        padding: 8px 0;
    }

    .calendar-day {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 40px;
        width: 40px;
        border: 1px solid lightgray;
        background-color: ghostwhite;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .calendar-day:hover {
            background-color: powderblue;
        }

    .current-month {
        color: black;
    }

    .other-month {
        color: gray;
    }

    .today {
        color: red;
        font-weight: bold;
    }

    .reg-day {
        color: blue;
        font-weight: bold;
    }

    .special {
        background-color: silver;
        font-weight: bold;
    }

    .unclickable {
        pointer-events: none;
        color: lightgray;
        background-color: whitesmoke;
    }
</style>