@using Models.Diaries
@using Interfaces

@inject IAppState _appState
@inject IDiaryManager _diaryManager

@code {
	[Parameter] public Func<Task>? RerenderParent { get; set; }
	[Parameter] public bool IsHabit { get; set; }

	protected List<Diary_log_column> allCols;
	protected List<Diary_log_post> allPosts;

	public DiaryComp()
	{
		allCols = new List<Diary_log_column>();
		allPosts = new List<Diary_log_post>();
	}

	public async Task RerenderComponent()
	{
		await LoadTask(null, false);
	}

	protected override async Task OnInitializedAsync()
	{
		await LoadTask(null, false);
	}

	protected async Task LoadTask(Func<Task>? action, bool callParent = true)
	{
		await InvokeAsync(() => _appState.MainLayout.SetLoadingScreen(true));

		try
		{
			if(action is not null)
				await action();
		}
		finally
		{
			await UpdateTables();
			if (callParent && RerenderParent is not null)
				await InvokeAsync(RerenderParent);
			await InvokeAsync(() => _appState.MainLayout.SetLoadingScreen(false));
		}
	}

	protected virtual async Task UpdateTables()
	{
		allCols = await _diaryManager.GetDiaryCols(_appState.CurrentUser.Id, IsHabit);
		allPosts = await _diaryManager.GetDiaryPosts(_appState.CurrentUser.Id, IsHabit);
	}

	protected async Task DeleteRow(DateTime date)
	{
		await LoadTask(() => _diaryManager.DeleteSameDatePosts(_appState.CurrentUser.Id, date, IsHabit));
	}


	protected async Task ToggleHabitValue(int colId, DateTime day)
	{
		await LoadTask(() => _diaryManager.ToggleHabitValue(colId, day));
	}
}
