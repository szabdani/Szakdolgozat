@inherits DiaryCompBase

@using Bases
@using Models.Diaries

<div class="row">
	<div class="col">
		<InputSelect class="form-control" @bind-Value=colId>
			<option value=0>Select a Habit</option>
			@foreach (var c in allCols)
			{
				<option value="@c.Id">@c.Name</option>
			}
		</InputSelect>
	</div>
	<div class="col">
		<button class="btn btn-warning" value="Show" @onclick="RefreshDiaryComps" disabled="@(colId == 0)">Show Stats</button>
	</div>
</div>
@if (isColViewSet)
{
	<div class="row">
		<div class="col">
			<Calendar Title="@title"  SpecialDates="doneDates" OnDayClickAction="Toggle" @ref="calendar" />
		</div>
		<div class="col">
			<table class="table text-center" style="table-layout: fixed;">
				<thead>
					<tr>
						<th scope="col">Time span</th>
						<th scope="col">#</th>
						<th scope="col">%</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>This Week</td>
						<td>
							@numPerWeek
							/
							@totalPerWeek
						</td>
						<td>
							@((numPerWeek / (double)totalPerWeek).ToString("0.##%"))
						</td>
					</tr>
					<tr>
						<td>@calendar.CalendarDate.ToString("MMMM")</td>
						<td>
							@numPerMonth
							/
							@totalPerMonth
						</td>
						<td>
							@((numPerMonth/ (double)totalPerMonth).ToString("0.##%"))
						</td>
					</tr>
					<tr>
						<td>@calendar.CalendarDate.ToString("yyyy")</td>
						<td>
							@numPerYear
							/
							@totalPerYear
						</td>
						<td>
							@((numPerYear / (double)totalPerYear).ToString("0.##%"))
						</td>
					</tr>
					<tr>
						<td>All time</td>
						<td>
							@numPerAll
							/
							@totalPerAll
						</td>
						<td>
							@((numPerAll / (double)totalPerAll).ToString("0.##%"))
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
}

@code {
	private string title = "-";
	private bool isColViewSet = false;
	private int colId = 0;

	private List<Diary_log_post> posts;
	private List<DateTime> doneDates;

	private Calendar calendar;

	private int numPerWeek = 0;
	private int totalPerWeek = 0;

	private int numPerMonth = 0;
	private int totalPerMonth = 0;

	private int numPerYear = 0;
	private int totalPerYear = 0;

	private int numPerAll = 0;
	private int totalPerAll = 0;

	public HabitStat()
	{
		IsHabit = true;

		posts = new List<Diary_log_post>();
		doneDates = new List<DateTime>();

		calendar = new Calendar();
	}

	protected override async Task UpdateTables()
	{
		await base.UpdateTables();

		string? name = allCols.FirstOrDefault(c => c.Id == colId)?.Name;
		if (name is not null)
		{
			title = $"{name} Entries";
			isColViewSet = true;
		}
		else
		{
			isColViewSet = false;
		}

		posts = allPosts.Where(p => p.Diary_log_column_Id == colId).ToList();
		doneDates = posts.Where(p => p.Value == "X").Select(p => p.Date).Distinct().OrderBy(date => date).ToList();

		numPerWeek = doneDates.Where(d => IsDateThisWeek(d)).Count();
		totalPerWeek = allDatesSinceReg.Where(d => IsDateThisWeek(d)).Count();

		numPerMonth = doneDates.Where(d => d.Month == calendar.CalendarDate.Month && d.Year == calendar.CalendarDate.Year).Count();
		totalPerMonth = allDatesSinceReg.Where(d => d.Month == calendar.CalendarDate.Month && d.Year == calendar.CalendarDate.Year).Count();

		numPerYear = doneDates.Where(d => d.Year == calendar.CalendarDate.Year).Count();
		totalPerYear = allDatesSinceReg.Where(d => d.Year == calendar.CalendarDate.Year).Count();

		numPerAll = doneDates.Count();
		totalPerAll = allDatesSinceReg.Count();
	}

	private async Task Toggle(DateTime day)
	{
		await OnToggleHabitValue(colId, day);
	}

	private bool IsDateThisWeek(DateTime date)
	{
		DateTime today = DateTime.Today;

		int daysSinceMonday = (int)today.DayOfWeek - 1;
		if (daysSinceMonday < 0) 
			daysSinceMonday += 7;


		DateTime monday = today.AddDays(-daysSinceMonday);
		DateTime sunday = monday.AddDays(6);

		return date.Date >= monday && date.Date <= sunday;
	}
}
