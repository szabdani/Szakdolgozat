@page "/"

@using MauiBlazorWeb.Shared.Components.Dialogs
@using MauiBlazorWeb.Shared.Components.Dialogs.Diary
@using MauiBlazorWeb.Shared.Components.DiaryComps
@using Models.Diaries
@using Interfaces

@inject IAppState _appState
@inject IDiaryManager _diaryManager

@if (!_appState.IsLoggedIn)
{
	<div class="row">
		<div class="col m-2" style="background-color: #ffefef">
			<h1>Welcome to LifeTracker</h1>
			<LoginPrompt />
		</div>
	</div>
}
else
{
	<div class="row">
		<div class="col m-2" style="background-color: #ffefef">
			<div class="row">
				<div class = "col">
					<Calendar Title="Diary Entries" SpecialDates="uniqueDates" OnDayClickAction="OpenDay" />
				</div>
			</div>
		</div>
		<div class="col m-2" style="background-color: #ffefef">
			<div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
				<table class="table text-center">
					<thead class="thead-light" style="position: sticky; top: 0; z-index: 1; background-color: #ffefef">
						<tr>
							<th scope="col">Habits</th>
							<th scope="col">Did today?</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var col in habitCols)
						{
							<tr>
								<th>@col.Name</th>
								@{
									var post = habitPosts.FirstOrDefault(p => p.Diary_log_column_Id == col.Id && p.Date == DateTime.Now.Date);
									<td class="tracker-post" @onclick="() => ToggleValue(col.Id)">
										@(post?.Value ?? "")
									</td>
								}
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
		<div class="col m-2">
			<div class="row mb-2" style="background-color: #ffefef">
				<div class = "col">
					Stat kép 1
				</div>
			</div>
			<div class="row" style="background-color: #ffefef">
				<div class="col">
					Stat kép 2
				</div>
			</div>
		</div>
	</div>
}
<style>
	.tracker-post {
		vertical-align: middle;
		background-color: #f9f9f9;
		cursor: pointer;
		transition: background-color 0.3s;
	}

		.tracker-post:hover {
			background-color: #d0f0ff;
		}
</style>

@code
{
	private List<Diary_log_column> habitCols;
	private List<Diary_log_post> habitPosts;
	private List<DateTime> uniqueDates;

	public Home()
	{
		habitCols = new List<Diary_log_column>();
		habitPosts = new List<Diary_log_post>();
		uniqueDates = new List<DateTime>();
	}

	protected override async Task OnInitializedAsync()
	{
		await InvokeAsync(() => _appState.MainLayout.SetLoadingScreen(true));
		await UpdateTables();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await InvokeAsync(() => _appState.Title = "Home");
			await InvokeAsync(() => _appState.MainLayout.RerenderLayout());
			await InvokeAsync(() => _appState.MainLayout.SetLoadingScreen(false));
		}
	}

	private async Task UpdateTables()
	{
		habitCols = await _diaryManager.GetDiaryCols(_appState.CurrentUser.Id, true);
		habitPosts = await _diaryManager.GetDiaryPosts(_appState.CurrentUser.Id, true);
		uniqueDates = await _diaryManager.GetUniquePostDates(_appState.CurrentUser.Id, false);

		await InvokeAsync(StateHasChanged);
		await InvokeAsync(() => _appState.MainLayout.SetLoadingScreen(false));
	}

	private async Task ToggleValue(int colId)
	{
		await InvokeAsync(() => _appState.MainLayout.SetLoadingScreen(true));

		await _diaryManager.ToggleHabitValue(colId, DateTime.Now.Date);
		await UpdateTables();
	}

	private async Task OpenDay(DateTime day)
	{
		// Nem ez lesz
		Console.WriteLine($"Day clicked: {day.ToShortDateString()}");
	}
}