@page "/"

@using MauiBlazorWeb.Shared.Components.Dialogs
@using MauiBlazorWeb.Shared.Components.Dialogs.Diary
@using Models.Diaries
@using Interfaces

@inject IAppState _appState
@inject IDiaryManager _diaryManager

@if (!_appState.IsLoggedIn)
{
	<div class="row">
		<div class="col m-2" style="background-color: #ffefef">
			<h1>Welcome to LifeTracker</h1>
			<LoginPrompt />
		</div>
	</div>
}
else
{
	<div class="row">
		<div class="col m-2" style="background-color: #ffefef">
			<div class="row">
				<div class = "col">
					<Calendar SpecialDates="uniqueDates" OnDayClickAction="OpenDay" />
				</div>
			</div>
			<div class="row">
				<div class = "col">
					
				</div>
			</div>
		</div>
		<div class="col m-2" style="background-color: #ffefef">
			<div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
				<table class="table table-hover text-center">
					<thead class="thead-light" style="position: sticky; top: 0; z-index: 1; background-color: #ffefef">
						<tr>
							<th scope="col">Habits</th>
							<th scope="col">Did today?</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var col in habitCols)
						{
							<tr>
								<td>@col.Name</td>
								@{
									var post = habitPosts.FirstOrDefault(p => p.Diary_log_column_Id.Equals(col.Id) && p.Date.Equals(today.Date));
									<td @onclick="() => ToggleValue(col.Id)">
										@(post?.Value ?? "")
									</td>
								}
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
		<div class="col m-2">
			<div class="row mb-2" style="background-color: #ffefef">
				<div class = "col">
					Stat kép 1
				</div>
			</div>
			<div class="row" style="background-color: #ffefef">
				<div class="col">
					Stat kép 2
				</div>
			</div>
		</div>
	</div>
}

@code
{
	private List<Diary_log_column> habitCols;
	private List<Diary_log_post> habitPosts;
	private List<DateTime> uniqueDates;
	private DateTime today;

	public Home()
	{
		habitCols = new List<Diary_log_column>();
		habitPosts = new List<Diary_log_post>();
		today = DateTime.Now;;
		uniqueDates = new List<DateTime>();
	}

	protected override async Task OnInitializedAsync()
	{
		await InvokeAsync(() => _appState.MainLayout.SetLoadingScreen(true));
		uniqueDates = await _diaryManager.GetUniquePostDates(_appState.CurrentUser.Id, false);
		await UpdateTables();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await InvokeAsync(() => _appState.Title = "Home");
			await InvokeAsync(() => _appState.MainLayout.RerenderLayout());
			await InvokeAsync(() => _appState.MainLayout.SetLoadingScreen(false));
		}
	}

	private async Task UpdateTables()
	{
		habitCols = await _diaryManager.GetDiaryCols(_appState.CurrentUser.Id, true);
		habitPosts = await _diaryManager.GetDiaryPosts(_appState.CurrentUser.Id, true);

		await InvokeAsync(StateHasChanged);
	}

	private async Task ToggleValue(int colId)
	{
		var post = habitPosts.FirstOrDefault(p => p.Diary_log_column_Id == colId && p.Date == today.Date);
		if (post == null)
		{
			post = new Diary_log_post { Date = today.Date, Value = "X", Diary_log_column_Id = colId };
			await _diaryManager.InsertDiaryPost(post);
		}
		else
		{
			post.Value = post.Value == "X" ? "" : "X";
			await _diaryManager.UpdateDiaryPost(post);
		}

		await UpdateTables();
	}

	private async Task OpenDay(DateTime day)
	{
		Console.WriteLine($"Day clicked: {day.ToShortDateString()}");
	}
}