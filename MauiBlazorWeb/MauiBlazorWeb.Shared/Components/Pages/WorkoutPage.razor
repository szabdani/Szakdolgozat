@page "/workout/id={WorkoutId:int}"
@inherits SportCompBase

@using MauiBlazorWeb.Shared.Components.Widgets.Bases
@using MauiBlazorWeb.Shared.Components.Widgets.Sport
@using MauiBlazorWeb.Shared.Components.Dialogs
@using MauiBlazorWeb.Shared.Components.Widgets.Sport.Dialogs
@using MauiBlazorWeb.Shared.Components.Icons
@using Models.Sports

@if (!AppState.IsLoggedIn)
{
	<NotLoggedIn/>
}
else if (hasInvalidParameter)
{
	<h3>This is not a valid path to the Workout page</h3>
}
else
{
	<div class="row">
		<div class="col-auto m-2 float-end">
			<div class="row" style="background-color: darkgrey">
				<div class="col">
					<div class="row">
						<div class="col-auto @(workout.IsRoutineExample? "text-center" : "")">
							@if (workout.IsRoutineExample)
							{
								<h4>Adjusting @workout.Name routine</h4>
							}
							else
							{
								<h4>Workout duration: @(clock.Hours == 0 ? clock.ToString(@"mm\:ss") : clock.ToString(@"hh\:mm\:ss"))</h4>
							}
						</div>
					</div>
					<div class="row">
						<div class="col-auto">
							@if (workout.IsRoutineExample)
							{
								<button class="btn btn-danger" @onclick="() => OnDeletRoutineById(workout.Account_does_Sport_Id, (int)workout.Routine_Id!)">
									Delete Routine
								</button>
							}
							else
							{
								<button class="btn btn-danger" @onclick="() => OnDiscardWorkout(workout)">
									Discard Workout
								</button>
							}
						</div>
						<div class="col-auto float-end">
							@if (workout.IsRoutineExample)
							{
								<button class="btn btn-info" @onclick="NavigateToSportPage">
									Return to Sport Page
								</button>
							}
							else
							{
								@if (workout.IsDone)
								{
									<button class="btn btn-warning" @onclick="OnResumeWorkout">
										Resume Workout
									</button>
								}
								else
								{
									<button class="btn btn-success" @onclick="OnFinishWorkout">
										Finish Workout
									</button>
								}
							}
						</div>
					</div>
				</div>
			</div>
			<div class="row" style="background-color: lightgray">
				<div class="col">
					<table class="table table-striped text-center">
						@if (exercises.Count != 0)
						{
							<thead class="thead-light">
								<tr>
									<th>Name</th>
									<th colspan="2">Reorder</th>
									<th>Del</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var ex in exercises)
								{
									<tr>
										<td>
											@ex.Name
										</td>
										<td>
											@if (exercises.First() != ex)
											{
												<button class="btn btn-info" disabled=@workout.IsDone @onclick="() => MoveExercise(ex, true)">
													<IconUp />
												</button>
											}
											else
											{
												<IconDash />
											}
										</td>
										<td>
											@if (exercises.Last() != ex)
											{
												<button class="btn btn-info" disabled=@workout.IsDone @onclick="() => MoveExercise(ex, false)">
													<IconDown />
												</button>
											}
											else
											{
												<IconDash />
											}
										</td>
										<td>
											<button class="btn btn-danger" disabled=@workout.IsDone @onclick="() => OnRemoveExercise(ex)">
												<IconDelete />
											</button>
										</td>
									</tr>
								}
							</tbody>
						}
						else
						{
							<thead class="thead-light">
								<tr>
									<th colspan="4">Pick an exercise to start tracking</th>
								</tr>
							</thead>
						}
						<tfoot>
							<tr>
								<td colspan="4">
									<button class="btn btn-primary" disabled=@workout.IsDone @onclick="() => {if(addExerciseDialog is not null) {addExerciseDialog?.Show();}}">
										<IconAdd /> Add an Exercise
									</button>
								</td>
							</tr>
						</tfoot>
					</table>
				</div>
			</div>
		</div>
		<div class="col m-2">
			<div class="row mb-2" style="background-color: darkgrey">

				<div class="row">
					<div class="col">
						<h3>
							<InputText class="form-control" @bind-Value=workout.Name @bind-Value:after="UpdateWorkout"
							placeholder= "@placeholderStr" disabled=@workout.IsDone
							style="background-color: inherit; border: none; font-size: inherit; font-weight: bold" />
						</h3>

					</div>
					<div class="col-auto float-end align">
						@if (!workout.IsRoutineExample && workout.Routine_Id is not null)
						{
							<h4>
								Routine: @routineExampleWorkout.Name 
							</h4>
						}
						<h4>
							@(workout.IsRoutineExample ? "Creation date:" : "Date:") @workout.Starttime.ToString("yyyy-MM-dd HH:mm")
						</h4>
					</div>
				</div>
				<div class="row">
					<div class="col">
						<textarea class="form-control"
						@bind="workout.Notes"
						@bind:after="UpdateWorkout"
						disabled=@workout.IsDone
						rows="1"
						placeholder="Write something about this workout"
						style="resize:vertical; background-color: lightgrey"
						oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';">
						</textarea>
					</div>
				</div>

			</div>
			<div class="row">
				<div class="col">
					<div class="row">
						<div class="col">
							@if (exercises.Count != 0)
							{
								@foreach (var ex in exercises)
								{
									<div class="row" style="background-color: lightgrey">
										<div class="col">
											<div class="row">
												<div class="col">
													<h4>@ex.Name</h4>
												</div>
												<div class="col-auto float-end">
													<button class="btn btn-info" disabled=@workout.IsDone @onclick="() =>{if(exerciseDialog is not null) {exerciseDialog?.Show(ex);}}">
														<IconAdd />
													</button>
												</div>
												<div class="col-auto float-end">
													<button class="btn btn-danger" disabled=@workout.IsDone @onclick="() => OnRemoveExercise(ex)">
														<IconDelete />
													</button>
												</div>
											</div>
											<div class="row">
												<div class="col">
													<h5 class="text-secondary">@(ex.Notes ?? "No description for this exercise")</h5>
												</div>
											</div>
										</div>
									</div>
									<div class="row" style="background-color: navajowhite">
										<div class="col">
											<ExerciseSets WorkoutId="WorkoutId" ExerciseId="ex.Id" Disabled="workout.IsDone" @key="ex.Id" @ref="exerciseBoxRefs[ex.Id]" />
										</div>
									</div>
								}
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

<AddExerciseDialog AccountDoesId="workout.Account_does_Sport_Id" WorkoutId="WorkoutId" ExerciseIds="exercises.Select(e => e.Id).ToList()" @ref="addExerciseDialog" />

<WarningDialog Title="Invalid Set in Workout" @ref="warning">
	@if (exercises.Count == 0)
	{
		<p>
			Your workout has no exercises!<br />
			Either add exercises or discard the workout.
		</p>
	}
	else
	{
		<p>
			Your workout has at least one unfinished set!<br />
			Either finish it or delete it.
		</p>
	}

</WarningDialog>

<ExerciseDialog @ref="exerciseDialog" />

@code {
	[Parameter]
	public required int WorkoutId { get; set; } = 0;

	private string placeholderStr = "";

	private Workout workout = new();
	private Workout routineExampleWorkout = new();
	private List<Exercise> exercises = [];
	private List<Sets> sets = [];


	private Timer timer = new Timer(_ => { }, null, Timeout.Infinite, Timeout.Infinite);
	private TimeSpan clock;

	private ExerciseDialog? exerciseDialog;
	private AddExerciseDialog? addExerciseDialog;
	private WarningDialog warning = new();

	private IDisposable? navHandler;

	private Dictionary<int, ExerciseSets> exerciseBoxRefs = [];


	private void OnTick(object? state)
	{
		clock = clock.Add(TimeSpan.FromSeconds(1));
		InvokeAsync(StateHasChanged);
	}

	public override void Dispose()
	{
		timer?.Dispose();
		navHandler?.Dispose();
		base.Dispose();
	}

	protected override async Task ValidateParameters()
	{
		workout = await ValidateWorkout(WorkoutId);

		if (!workout.IsRoutineExample)
		{
			if (workout.Duration != TimeSpan.Zero)
				clock = workout.Duration;
			else
				clock = TimeSpan.Zero;

			if (!workout.IsDone)
				timer = new Timer(OnTick, null, 0, 1000);

			if (workout.Routine_Id is not null)
			{
				var workoutSets = await SportAPI.GetSetsByWorkout(workout.Id);
				routineExampleWorkout = (await SportAPI.GetRoutineExample(workout.Account_does_Sport_Id, (int)workout.Routine_Id)).First();

				if (workoutSets.Count == 0)
				{
					var exampleSets = await SportAPI.GetSetsByWorkout(routineExampleWorkout.Id);
					foreach (var set in exampleSets)
					{
						set.Workout_Id = workout.Id;
						bool isCorrect = await SportAPI.InsertSet(set);
						if (!isCorrect)
							throw new Exception($"Sorry, we could not insert Set");
					}
				}
			}
		}

		string typeStr = workout.IsRoutineExample ? "Routine" : "Workout";
		placeholderStr = $"Name this {typeStr}";

		await base.ValidateParameters();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			navHandler = Navigation.RegisterLocationChangingHandler(OnLocationChanging);
			if (!hasInvalidParameter)
			{
				await InvokeAsync(() => AppState.Title = "Workout");
			}
			else
				await InvokeAsync(() => AppState.Title = "Invalid New Workout");

			await InvokeAsync(() => AppState.MainLayout.RerenderLayout());
		}
	}

	protected override async Task UpdateTables()
	{
		await base.UpdateTables();

		var unOrderedSets = await SportAPI.GetSetsByWorkout(workout.Id);
		sets = unOrderedSets.OrderBy(s => s.Workoutindex).ToList();

		var exIds = sets.Select(s => s.Exercise_Id).Distinct().ToList();

		if (exIds.Count > exercises.Count)
		{
			var addedIds = exIds.Except(exercises.Select(e => e.Id));

			foreach (var id in addedIds)
			{
				List<Exercise> exList = await SportAPI.GetExercise(id);
				Exercise ex = exList.First();
				exercises.Add(ex);
			}
		}
		else if (exIds.Count < exercises.Count)
		{
			List<int> deletedIds = exercises.Select(e => e.Id).Except(exIds).ToList();

			foreach (var id in deletedIds)
			{
				if (exerciseBoxRefs.TryGetValue(id, out var exerciseSetsRef))
				{
					exerciseSetsRef.Dispose();
					exerciseBoxRefs.Remove(id);
				}
				exercises.RemoveAll(ex => ex.Id == id);
			}
		}

		int workoutIndex = 1;
		foreach (var ex in exercises)
		{
			var exSets = sets.Where(s => s.Exercise_Id == ex.Id);
			foreach(var set in exSets)
			{
				if (set.Workoutindex != workoutIndex)
				{
					set.Workoutindex = workoutIndex;
					bool isCorrect = await SportAPI.UpdateSet(set);
					if (!isCorrect)
						throw new Exception($"Sorry, we could not update index of Set");
				}
				workoutIndex++;
			}
		}
	}

	private ValueTask OnLocationChanging(LocationChangingContext context)
	{
		if (!workout.IsDone && !hasInvalidParameter)
		{
			Task.Run(async () =>
			{
				timer?.Dispose();
				workout.Duration = clock;

				bool isCorrect = await SportAPI.UpdateWorkout(workout);
				if (!isCorrect)
					throw new Exception($"Sorry, we could not save your Workout");
			}).ConfigureAwait(false);
		}

		return ValueTask.CompletedTask;
	}

	private async Task OnRemoveExercise(Exercise ex)
	{
		await AppState.ShowLoadingScreenWhileAwaiting(()=> RemoveExercise(ex));
	}

	private async Task OnFinishWorkout()
	{
		await AppState.ShowLoadingScreenWhileAwaiting(FinishWorkout);
	}

	private async Task OnResumeWorkout()
	{
		await AppState.ShowLoadingScreenWhileAwaiting(ResumeWorkout);
	}

	private async Task RemoveExercise(Exercise ex)
	{
		await exerciseBoxRefs[ex.Id].DeleteSets();
	}

	private async Task MoveExercise(Exercise ex, bool moveUp)
	{
		int dir = moveUp ? -1 : 1;
		int index = exercises.IndexOf(ex);

		Exercise temp = exercises[index];
		exercises[index] = exercises[index + dir];
		exercises[index + dir] = temp;

		exerciseBoxRefs = [];

		await RefreshSportComps();
	}

	private bool ValidateExercises()
	{
		bool isValid = true;

		foreach (var box in exerciseBoxRefs)
		{
			isValid = box.Value.ValidateSets();
			if (!isValid)
				break;
		}

		return isValid;
	}

	private void NavigateToSportPage()
	{
		Navigation.NavigateTo($"/sports/id={workout.Account_does_Sport_Id}", true);
	}

	private async Task FinishWorkout()
	{
		bool isCorrect =  ValidateExercises();
		if (!isCorrect || exercises.Count == 0)
		{
			warning.Show();
		}
		else
		{
			timer?.Dispose();
			workout.Duration = clock;
			workout.IsDone = true;

			await UpdateWorkout();

			NavigateToSportPage();
		}
	}

	private async Task UpdateWorkout()
	{
		bool isCorrect = await SportAPI.UpdateWorkout(workout);
		if (!isCorrect)
			throw new Exception($"Sorry, we could not update your Workout");
	}

	private async Task ResumeWorkout()
	{
		timer = new Timer(OnTick, null, 0, 1000);
		workout.IsDone = false;
		await UpdateWorkout();
	}
}