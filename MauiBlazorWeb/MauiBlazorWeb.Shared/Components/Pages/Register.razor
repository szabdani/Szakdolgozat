@page "/register"

@using MauiBlazorWeb.Shared.Components.Dialogs
@using Models
@using System.Security.Cryptography
@using Interfaces

@inject NavigationManager Navigation
@inject IAppState _appState
@inject IAccountAPIService _accountAPI 
@inject IPasswordHasher _passwordHasher
@implements IDisposable

@if (_appState.IsLoggedIn)
{
    <LoggedIn />
}
else
{
    <div class="row">
        <div class="col m-2" style="background-color: #ffefef">
            <EditForm EditContext=editContext OnValidSubmit=OnRegisterAccount>
                <DataAnnotationsValidator />
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Username:</label>
                    <div class="col-sm-2" @ref="startUsername">
                        <InputText class="form-control" @bind-Value=newAccount.Username />
                    </div>
                    <div class="col-sm-3 d-flex align-items-center">
                        <ValidationMessage For="@(() => newAccount.Username)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Email:</label>
                    <div class="col-sm-2">
                        <InputText class="form-control" @bind-Value=newAccount.Email />
                    </div>
                    <div class="col-sm-3 d-flex align-items-center">
                        <ValidationMessage For="@(() => newAccount.Email)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Password:</label>
                    <div class="col-sm-2">
                        <InputText class="form-control" type="password" @bind-Value=newAccount.Password1 />
                    </div>
                    <div class="col-sm-3 d-flex align-items-center">
                        <ValidationMessage For="@(() => newAccount.Password1)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Confirmation password:</label>
                    <div class="col-sm-2">
                        <InputText class="form-control" type="password" @bind-Value=newAccount.Password2 />
                    </div>
                    <div class="col-sm-3 d-flex align-items-center">
                        <ValidationMessage For="@(() => newAccount.Password2)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Date of birth:</label>
                    <div class="col-sm-2">
                        <InputDate class="form-control" @bind-Value=newAccount.Birthdate/>
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Gender:</label>
                    <div class="col-sm-2">
                        <InputSelect class="form-control" @bind-Value=newAccount.Gender>
                        @foreach (var gender in Enum.GetValues(typeof(GenderType)))
                        {
                            <option value="@gender">@gender</option>
                        }       
                        </InputSelect>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-2">
                        <input type="submit" class="btn btn-warning flex-column" value="Register" disabled=@isError/>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>


    <MessageDialog @ref="dialog" Title="Registration" Link="Login">
        <p>Successful registration.</p>
    </MessageDialog>
}

@code {
    private LoginRegUser newAccount = new();
    private EditContext editContext;
    private ValidationMessageStore messageStore;
    private bool isError = true;

    private MessageDialog dialog = new();

    private ElementReference startUsername;

    public Register()
    {
        editContext = new EditContext(newAccount);
        messageStore = new ValidationMessageStore(editContext);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await InvokeAsync(() => _appState.Title = "Register");
            await InvokeAsync(() => _appState.MainLayout.RerenderLayout());
            if (!_appState.IsLoggedIn)
                await startUsername.FocusAsync();
        }
    }

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(Account.Username))
        {
            isError = ValidateUsername();
        }
        isError = !editContext.Validate();
        StateHasChanged();
    }

    void NewEditContext()
    {
        newAccount = new LoginRegUser();
        editContext = new EditContext(newAccount);
        messageStore = new ValidationMessageStore(editContext);
        isError = true;
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }

    private bool ValidateUsername()
    {
        bool isTaken = false;

        foreach (var user in _appState.ExistingUsers)
        { 
            if (user.Username.Equals(newAccount.Username))
            {
                isTaken = true;
                break;
            }
        }

        if (isTaken)
        {
            messageStore.Add(() => newAccount.Username, "Sorry, this username is already taken.");
        }
        else
            messageStore.Clear();
        return isTaken;
    }

    private async Task OnRegisterAccount()
    {
        await _appState.ShowLoadingScreenWhileAwaiting(RegisterAccount);
    }

    private async Task RegisterAccount()
    {
        bool success = await _appState.Register(newAccount, _accountAPI, _passwordHasher);
        if (success)
        {
            dialog.Show();
            NewEditContext();
        }
        else
            throw new Exception("Sorry, we could not register your account");
    }
}

