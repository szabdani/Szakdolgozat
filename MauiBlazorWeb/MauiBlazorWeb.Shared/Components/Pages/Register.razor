@page "/register"

@using MauiBlazorWeb.Shared.Components.Dialogs
@using Models
@using System.Security.Cryptography
@using Interfaces


@inject IDataAccess _data
@inject IPasswordHasher _pw
@implements IDisposable

<EditForm EditContext=editContext OnValidSubmit=RegisterAccount>
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Username:</label>
        <div class="col-sm-2" @ref="startUsername">
            <InputText class="form-control" @bind-Value=newAccount.Username />
        </div>
        <div class="col-sm-3 d-flex align-items-center">
            <ValidationMessage For="@(() => newAccount.Username)" />
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Email:</label>
        <div class="col-sm-2">
            <InputText class="form-control" @bind-Value=newAccount.Email />
        </div>
        <div class="col-sm-3 d-flex align-items-center">
            <ValidationMessage For="@(() => newAccount.Email)" />
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Password:</label>
        <div class="col-sm-2">
            <InputText class="form-control" type="password" @bind-Value=newAccount.Password1 />
        </div>
        <div class="col-sm-3 d-flex align-items-center">
            <ValidationMessage For="@(() => newAccount.Password1)" />
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Confirmation password:</label>
        <div class="col-sm-2">
            <InputText class="form-control" type="password" @bind-Value=newAccount.Password2 />
        </div>
        <div class="col-sm-3 d-flex align-items-center">
            <ValidationMessage For="@(() => newAccount.Password2)" />
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Date of birth (MM/dd/yyyy):</label>
        <div class="col-sm-2">
            <InputDate class="form-control" @bind-Value=newAccount.Birthdate/>
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Gender:</label>
        <div class="col-sm-2">
            <InputSelect class="form-control" @bind-Value=newAccount.Gender>
            @foreach (var gender in Enum.GetValues(typeof(GenderType)))
            {
                <option value="@gender">@gender</option>
            }       
            </InputSelect>
        </div>
    </div>
    <div class="form-group row">
        <div class="col-sm-2">
            <input type="submit" class="btn btn-warning flex-column" value="Register" disabled=@isError/>
        </div>
    </div>
</EditForm>

<MessageDialog @ref="dialog" Title="Registration" Link="Login">
    <p>Successful registration.</p>
</MessageDialog>

@code {
    [CascadingParameter]
    public Action<string>? UpdateTitle { get; set; }

    private Account newAccount;
    private EditContext editContext;
    private ValidationMessageStore messageStore;
    private bool isError;
    private List<Account> existingUsers;
    private MessageDialog dialog;

    private ElementReference startUsername;

    public Register()
    {
        newAccount = new Account();
        editContext = new EditContext(newAccount);
        messageStore = new ValidationMessageStore(editContext);
        isError = true;
        existingUsers = new List<Account>();
        dialog = new MessageDialog();
    }

    protected override async Task OnInitializedAsync()
    {
        UpdateTitle?.Invoke("Register");

        editContext.OnFieldChanged += HandleFieldChanged;

        string sql = "select username from account";
        existingUsers = await _data.LoadData<Account, dynamic>(sql, new { });

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await startUsername.FocusAsync();
        }
    }

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(Account.Username))
        {
            isError = ValidateUsername();
        }
        isError = !editContext.Validate();
        StateHasChanged();
    }

    private bool ValidateUsername()
    {
        bool isTaken = false;
        foreach (var user in existingUsers)
        { 
            if (user.Username.Equals(newAccount.Username))
            {
                isTaken = true;
                break;
            }
        }

        if (isTaken)
        {
            messageStore.Add(() => newAccount.Username, "Sorry, this username is already taken.");
        }
        else
            messageStore.Clear();
        return isTaken;
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }

    private async Task RegisterAccount()
    {

        byte[] pw_salt = _pw.GenerateSalt();
        byte[] pw_hash = _pw.Hash(newAccount.Password1, pw_salt);

        int affectedRows;
        string date = newAccount.Birthdate.ToString("yyyy-MM-dd");
        string gender = newAccount.Gender.ToString();
        string sql = "Insert into account (username, email, password_hash, password_salt, birthdate, gender) values (@username, @email, @pw_h, @pw_s, @birthdate, @gender);";

        affectedRows = await _data.SaveData(sql, new {
            username = newAccount.Username, 
            email = newAccount.Email,
            pw_h = pw_hash, 
            pw_s = pw_salt,
            birthdate = date,
            gender = gender}
        );

        if (affectedRows == 0)
        {
            throw new Exception("Sorry, we could not register your account");
        }
        else
        {
            dialog.Show();
        }
    }
}

