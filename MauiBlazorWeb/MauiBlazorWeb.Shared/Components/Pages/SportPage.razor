@page "/sports/id={AccountDoesId:int}"
@inherits SportCompBase

@using MauiBlazorWeb.Shared.Components.Widgets.Bases
@using MauiBlazorWeb.Shared.Components.Widgets.Sport
@using MauiBlazorWeb.Shared.Components.Dialogs
@using MauiBlazorWeb.Shared.Components.Widgets.Sport.Dialogs
@using MauiBlazorWeb.Shared.Components.Icons
@using Models.Sports

@if (!AppState.IsLoggedIn)
{
	<NotLoggedIn />
}
else if (hasInvalidParameter)
{
	<h3>This is not a valid path to a Sport Page</h3>
}
else
{
	<div class="row">
		<div class="col-auto m-2" style="background-color: navajowhite;">
			<div class="row">
				<SportsCalendar AccountDoesId="AccountDoesId" />
			</div>
			<div class="row">
				<button class="btn btn-primary" @onclick="StartWorkoutPage">
					<IconAdd /> Start a new workout
				</button>
			</div>
			<div class="row">
				<button class="btn btn-primary" @onclick="()=> newRoutineDialog!.Show()">
					<IconAdd /> Create a new routine!
				</button>
			</div>
		</div>
		<div class="col m-2" style="background-color: navajowhite">
			<SportStat AccountDoesId="AccountDoesId" />
		</div>
		<div class="col m-2" style="background-color: navajowhite">
			<ExerciseLibrary AccountDoesId="AccountDoesId" IsInWorkout="false"/>
		</div>
	</div>
	<div class="row">
		<div class="col-auto m-2" style="background-color: navajowhite;">
			<RoutineTable AccountDoesId="AccountDoesId" />
		</div>
		<div class="col m-2" style="background-color: navajowhite">
			<WorkoutsListed AccountDoesId="AccountDoesId" />
		</div>
	</div>
}

<NewRoutineDialog AccountDoesId="AccountDoesId" @ref=newRoutineDialog />

@code {
	[Parameter]
	public required int AccountDoesId { get; set; }
	private Account_does_Sport accountDoesSport = new();
	private string title = "";
	private bool isInitialized = false;

	private NewRoutineDialog? newRoutineDialog;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			if (!hasInvalidParameter)
			{
				await InvokeAsync(() => AppState.Title = title);
			}
			else
				await InvokeAsync(() => AppState.Title = "Invalid Sport");

			await InvokeAsync(() => AppState.MainLayout.RerenderLayout());
			isInitialized = true;
		}
	}

	protected override async Task ValidateParameters()
	{
		accountDoesSport = await ValidateAccountDoesSport(AccountDoesId);
		var sport = await ValidateSport(accountDoesSport.Sport_Id);
		if (isInitialized && title != sport.Name)
		{
			title = sport.Name;
			await InvokeAsync(() => AppState.Title = title);
			await InvokeAsync(() => AppState.MainLayout.RerenderLayout());
		}

		await base.ValidateParameters();
	}

	private async Task StartWorkoutPage()
	{
		if (accountDoesSport == null)
			throw new Exception($"Sorry, this Sport is not followed.");
		else
			await OnStartWorkout(accountDoesSport.Id);
	}
}