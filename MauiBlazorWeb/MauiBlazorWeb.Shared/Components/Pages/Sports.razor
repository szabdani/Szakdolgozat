@page "/sports"

@using MauiBlazorWeb.Shared.Components.Dialogs
@using Interfaces
@inject IAppState _appState

@if (!_appState.IsLoggedIn)
{
	<div class="row">
		<div class="col m-2" style="background-color: #ffefef">
			<div class="row">
				<div class ="col">
					<h1>This page is only available to users!</h1>
				</div>
			</div>
			<div class="row">
				<div class ="col">
					<LoginPrompt />
				</div>
			</div>
		</div>
	</div>
}
else
{
	<div class="row">
		<div class="col m-2" style="background-color: #ffefef">
			Sports...
            <BarChart @ref="barChart" />
		</div>
	</div>
}

}

@using BlazorBootstrap
@code {
    private BarChart barChart = default!;
    private BarChartOptions barChartOptions = default!;
    private ChartData chartData = default!;

    protected override void OnInitialized()
    {
        var labels = new List<string> { "Chrome", "Firefox", "Safari", "Edge" };
        var datasets = new List<IChartDataset>();

        var dataset1 = new BarChartDataset()
            {
                Data = new List<double?> { 55000, 15000, 18000, 21000 },
                BorderWidth = new List<double> { 0 },
            };
        datasets.Add(dataset1);

        chartData = new ChartData
            {
                Labels = labels,
                Datasets = datasets
            };

        barChartOptions = new BarChartOptions();
        barChartOptions.Responsive = true;
        barChartOptions.Interaction = new Interaction { Mode = InteractionMode.Y };
        barChartOptions.IndexAxis = "y";

        barChartOptions.Scales = new Scales();
        barChartOptions.Scales.X = new ChartAxes();
        barChartOptions.Scales.Y = new ChartAxes();
        barChartOptions.Scales.X.Title = new ChartAxesTitle();
        barChartOptions.Scales.Y.Title = new ChartAxesTitle();

        barChartOptions.Scales.X.Title.Text = "Visitors";
        barChartOptions.Scales.X.Title.Display = true;

        barChartOptions.Scales.Y.Title.Text = "Browser";
        barChartOptions.Scales.Y.Title.Display = true;

        barChartOptions.Plugins.Legend.Display = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barChart.InitializeAsync(chartData, barChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
