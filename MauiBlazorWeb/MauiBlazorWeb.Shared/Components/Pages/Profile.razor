@page "/profile"

@using MauiBlazorWeb.Shared.Components.Widgets
@using MauiBlazorWeb.Shared.Components.Dialogs.Account
@using MauiBlazorWeb.Shared.Components.Dialogs
@using Interfaces

@inject IAppState _appState
@inject ILocalDataStorage _localStorage
@inject IAccountManager _accountManager
@inject IDiaryManager _diaryManager
@inject ISportManager _sportManager
@inject NavigationManager Navigation

@if (!_appState.IsLoggedIn)
{
	<NotLoggedIn />
}
else
{
	<div class="row">
		<div class="col m-2" style="background-color: #ffefef">
			<div class="row">
				<label class="col">Username:</label>
				<div class="col">
					@_appState.CurrentUser.Username
				</div>
				<div class="col d-flex align-items-center">
					<button type="button" class="btn btn-primary" @onclick="()=> usernameEdit.Show()">Edit</button>
				</div>
			</div>
			<div class="row">
				<label class="col">Password:</label>
				<div class="col">
					-
				</div>
				<div class="col d-flex align-items-center">
					<button type="button" class="btn btn-primary" @onclick="()=> passwordEdit.Show()">Edit</button>
				</div>
			</div>
			<div class="row">
				<label class="col">Email:</label>
				<div class="col">
					@_appState.CurrentUser.Email
				</div>
				<div class="col d-flex align-items-center">
					<button type="button" class="btn btn-primary" @onclick="()=> emailEdit.Show()">Edit</button>
				</div>
			</div>
			<div class="row">
				<label class="col">Birthdate:</label>
				<div class="col">
					@_appState.CurrentUser.Birthdate.ToString("yyyy-MM-dd")
				</div>
				<div class="col d-flex align-items-center">
					<button type="button" class="btn btn-primary" @onclick="()=> birthdateEdit.Show()">Edit</button>
				</div>
			</div>
			<div class="row">
				<label class="col">Gender:</label>
				<div class="col">
					@_appState.CurrentUser.Gender
				</div>
				<div class="col d-flex align-items-center">
					<button type="button" class="btn btn-primary" @onclick="()=> genderEdit.Show()">Edit</button>
				</div>
			</div>
			<div class="row">
				<label class="col">User since:</label>
				<div class="col">
					@_appState.CurrentUser.RegistrationDate.ToString("yyyy-MM-dd")
				</div>
				<div class="col d-flex align-items-center">
					<button type="button" class="btn btn-danger" @onclick="()=> warning.Show()">Delete Account</button>
				</div>
			</div>
		</div>
		<div class="col m-2" style="background-color: #ffefef">
			<ExportData />
		</div>
	</div>

	<WarningDialog Title="Deleting your account" OnAcceptAction="OnDeleteAccount" @ref="warning">
		Do you want to delete your account?<br/>
		This action can not be undone!
	</WarningDialog>

	<EditAccountDialog RerenderParent="RerenderProfile" @ref="usernameEdit">
		<EditUsernameDialog />
	</EditAccountDialog>
	<EditAccountDialog RerenderParent="RerenderProfile" @ref="passwordEdit">
		<EditPasswordDialog />
	</EditAccountDialog>
	<EditAccountDialog RerenderParent="RerenderProfile" @ref="emailEdit">
		<EditEmailDialog />
	</EditAccountDialog>
	<EditAccountDialog RerenderParent="RerenderProfile" @ref="birthdateEdit">
		<EditBirthdateDialog />
	</EditAccountDialog>
	<EditAccountDialog RerenderParent="RerenderProfile" @ref="genderEdit">
		<EditGenderDialog />
	</EditAccountDialog>
}

@code {
	private EditAccountDialog usernameEdit = new();
	private EditAccountDialog passwordEdit = new();
	private EditAccountDialog emailEdit = new();
	private EditAccountDialog birthdateEdit = new();
	private EditAccountDialog genderEdit = new();

	private WarningDialog warning = new();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			await InvokeAsync(() => _appState.Title = "Profile");
			await InvokeAsync(() => _appState.MainLayout.RerenderLayout());
		}
	}

	private async Task RerenderProfile()
	{
		await InvokeAsync(StateHasChanged);
	}

	private async Task OnDeleteAccount()
	{
		await _appState.ShowLoadingScreenWhileAwaiting(DeleteAccount);
	}

	private async Task DeleteAccount()
	{
		bool isCorrect = await _appState.Delete(_localStorage, _accountManager, _diaryManager, _sportManager);

		if(!isCorrect)
			throw new Exception($"Sorry, we could not delete your account.");

		Navigation.NavigateTo("", true);
	}
}
