@page "/habits"

@using MauiBlazorWeb.Shared.Components.Dialogs.Diary
@using MauiBlazorWeb.Shared.Components.Dialogs
@using MauiBlazorWeb.Shared.Components.Icons
@using Models.Diaries
@using Interfaces

@inject IAppState _appState
@inject IDiaryManager _diaryManager

@if (!_appState.IsLoggedIn)
{
	<div class="row">
		<div class="col m-2" style="background-color: #ffefef">
			<div class="row">
				<div class ="col">
					<h1>This page is only available to users!</h1>
				</div>
			</div>
			<div class="row">
				<div class ="col">
					<LoginPrompt />
				</div>
			</div>
		</div>
	</div>
}
else
{
	<div class="row" style="overflow-x: auto;">
		<div class="col m-2" style="background-color: #ffefef;">
			<div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
				<table class="table text-center">
					<thead class="thead-light" style="position: sticky; top: 0; z-index: 1; background-color: #ffefef">
						<tr>
							<th scope="col">Date</th>
							@foreach (var col in habitCols)
							{
								<th scope="col">
									@col.Name
									<button class="btn btn-warning" @onclick="() => editHabitDialog.Show(col)">
										<IconEdit />
									</button>
								</th>
							}
							<th scope="col">
								<button class="btn btn-info" @onclick="() => newHabitDialog.Show()">
									<IconAdd />
								</button>
							</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var date in uniqueDates)
						{
							<tr class="@(date.Month % 2 == 1 ? "lightrow" : "darkrow")">
								<th scope="row">@date.ToString("yyyy-MM-dd")</th>
								@foreach (var col in habitCols)
								{
									var post = habitPosts.FirstOrDefault(p => p.Diary_log_column_Id.Equals(col.Id) && p.Date.Equals(date));
									<td class="tracker-post" @onclick="() => ToggleValue(col.Id, date)">
										@(post?.Value ?? "")
									</td>
								}
								<th>
									<button class="btn btn-danger" @onclick="() => DeleteRow(date)">
										<IconDelete />
									</button>
								</th>
							</tr>
						}
					</tbody>
					<tfoot style="position: sticky; bottom: 0; background-color: #ffefef">
						<tr>
							<th scope="row">
								<button type="button" class="btn btn-info w-100" @onclick="()=>newEntryDialog.Show()">
									<IconAdd />
								</button>
							</th>
							@foreach (var col in habitCols)
							{
								<th>
									@habitPosts.Where(p => p.Diary_log_column_Id.Equals(col.Id) && p.Value == "X").Count()
								</th>
							}
							<th>
								Sum
							</th>
						</tr>
					</tfoot>
				</table>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col m-2" style="background-color: #ffefef">
			Statisztika gyakoriságról<br />
			lehet választani adatok, heti/havi/évi/összes felosztáson, és a megjelenésen is<br />
			ezeket a táblákat meg kell jegyezni, lehet újakat felvenni, itt maradnak ezen a képernyőn és frissülnek mindig
		</div>
		<div class="col m-2" style="background-color: #ffefef">
			<HabitStat AllCols="habitCols" RerenderParent="UpdateTables" @ref="habitStat" />
		</div>
	</div>

	<NewDiaryColDialog IsHabit="true" RerenderParent="UpdateTables" @ref=newHabitDialog />
	<EditDiaryColDialog IsHabit="true" RerenderParent="UpdateTables" @ref=editHabitDialog />
	<NewDiaryEntryDialog IsHabit="true" RerenderParent="UpdateTables" @ref=newEntryDialog />
}

<style>
	.lightrow {
		background-color: #ffefef;
	}

	.darkrow {
		background-color: #f2e3e3;
	}

	.tracker-post {
		vertical-align: middle;
		background-color: #f9f9f9;
		cursor: pointer;
		transition: background-color 0.3s;
	}

		.tracker-post:hover {
			background-color: #d0f0ff;
		}
</style>

@code {
	private List<Diary_log_column> habitCols;
	private List<Diary_log_post> habitPosts;
	private List<DateTime> uniqueDates;

	private NewDiaryColDialog newHabitDialog;
	private EditDiaryColDialog editHabitDialog;
	private NewDiaryEntryDialog newEntryDialog;

	private HabitStat habitStat;

	public Habits()
	{
		habitCols = new List<Diary_log_column>();
		habitPosts = new List<Diary_log_post>();
		uniqueDates = new List<DateTime>();

		newHabitDialog = new NewDiaryColDialog();
		editHabitDialog = new EditDiaryColDialog();
		newEntryDialog = new NewDiaryEntryDialog();

		habitStat = new HabitStat();
	}

	protected override async Task OnInitializedAsync()
	{
		await InvokeAsync(() => _appState.MainLayout.SetLoadingScreen(true));
		await UpdateTables();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await InvokeAsync(() => _appState.Title = "Habit Tracker");
			await InvokeAsync(() => _appState.MainLayout.RerenderLayout());
			await InvokeAsync(() => _appState.MainLayout.SetLoadingScreen(false));
		}
	}

	private async Task UpdateTables()
	{
		habitCols = await _diaryManager.GetDiaryCols(_appState.CurrentUser.Id, true);
		habitPosts = await _diaryManager.GetDiaryPosts(_appState.CurrentUser.Id, true);
		uniqueDates = await _diaryManager.GetUniquePostDates(_appState.CurrentUser.Id, true);

		await habitStat.UpdateDates();

		await InvokeAsync(StateHasChanged);
	}

	private async Task DeleteRow(DateTime date)
	{
		habitPosts = await _diaryManager.GetDiaryPosts(_appState.CurrentUser.Id, true);
		foreach (var p in habitPosts.Where(p => p.Date.Equals(date)))
		{
			bool fail = !await _diaryManager.DeleteDiaryPost(p);
			if (fail)
				throw new Exception($"Sorry, we could not delete post.");
		}

		await UpdateTables();
	}

	private async Task ToggleValue(int colId, DateTime date)
	{
		await _diaryManager.ToggleHabitValue(colId, date);
		await UpdateTables();
	}
}

