@page "/habits"

@using MauiBlazorWeb.Shared.Components.Dialogs.Diary
@using MauiBlazorWeb.Shared.Components.Dialogs
@using MauiBlazorWeb.Shared.Components.Images
@using Models.Diaries
@using Interfaces

@inject IAppState _appState
@inject IDataAccess _data
@inject IDiaryManager _diaryManager

@if (!_appState.IsLoggedIn)
{
	<h1>This page is only available to users!</h1>
	<LoginPrompt />
}
else
{
	<div class="row">
		<table class="table table-hover">
			<thead class="thead-light">
				<tr>
					<th scope="col">Date</th>
					@foreach (var col in habitCols)
					{
						<th scope="col">
							@col.Name
							<button class="btn btn-warning flex-column" @onclick="() => editHabitDialog.Show(col)">
								<IconEdit />
							</button>
						</th>
					}
					<th scope="col">
						<button type="button" class="btn btn-info w-100" @onclick="()=>newHabitDialog.Show()">Add a new Habit</button>
					</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var date in uniqueDates)
				{
					<tr>
						<th scope="row">@date.ToString("yyyy-MM-dd")</th>
						@foreach (var col in habitCols)
						{
							var post = habitPosts.FirstOrDefault(p => p.Diary_log_column_Id == col.Id && p.Date == date);
							<td @onclick="() => ToggleValue(col.Id, date)">
								@(post?.Value ?? "")
							</td>
						}
						<td>
							Delete DialogEntry @date
						</td>
					</tr>
				}
				<tr>
					<th scope="row">
						<button type="button" class="btn btn-info w-100" @onclick="()=>newEntryDialog.Show()">New Post</button>
					</th>
				</tr>
			</tbody>
		</table>
	</div>
	<div class="row">
		<div class="col-sm-6" style="background-color: #cde9e9">
			Statisztika gyakorisagrol
		</div>
		<div class="col-sm-5" style="background-color: #12e9e9">
			Nezet valtas
		</div>
	</div>

	<NewDiaryColDialog IsHabit="true" RerenderParent="UpdateTables" @ref=newHabitDialog />
	<EditDiaryColDialog IsHabit="true" RerenderParent="UpdateTables" @ref=editHabitDialog />
	<NewDiaryEntryDialog IsHabit="true" RerenderParent="UpdateTables" @ref=newEntryDialog />
}

@code {
	private List<Diary_log_column> habitCols;
	private List<Diary_log_post> habitPosts;
	private List<DateTime> uniqueDates;

	private NewDiaryColDialog newHabitDialog;
	private EditDiaryColDialog editHabitDialog;
	private NewDiaryEntryDialog newEntryDialog;

	public Habits()
	{
		habitCols = new List<Diary_log_column>();
		habitPosts = new List<Diary_log_post>();
		uniqueDates = new List<DateTime>();

		newHabitDialog = new NewDiaryColDialog();
		editHabitDialog = new EditDiaryColDialog();
		newEntryDialog = new NewDiaryEntryDialog();
	}

	protected override async Task OnInitializedAsync()
	{
		await InvokeAsync(() => _appState.MainLayout.SetLoadingScreen(true));

		await InvokeAsync(() => _appState.Title = "Habit Tracker");
		await InvokeAsync(() => _appState.MainLayout.RerenderLayout());

		await UpdateTables();


		await InvokeAsync(() => _appState.MainLayout.SetLoadingScreen(false));
	}

	private async Task UpdateTables()
	{
		habitCols = await _diaryManager.GetDiaryCols(_appState.CurrentUser.Id, true);
		habitPosts = await _diaryManager.GetDiaryPosts(_appState.CurrentUser.Id, true);
		uniqueDates = await _diaryManager.GetUniquePostDates(_appState.CurrentUser.Id, true);

		await InvokeAsync(StateHasChanged);
	}

	private async Task ToggleValue(int colId, DateTime date)
	{
		var post = habitPosts.FirstOrDefault(p => p.Diary_log_column_Id == colId && p.Date == date);
		if (post == null)
		{
			post = new Diary_log_post { Date = date, Value = "X", Diary_log_column_Id = colId };
			await _diaryManager.InsertDiaryPost(post);
		}
		else
		{
			post.Value = post.Value == "X" ? "" : "X";
			await _diaryManager.UpdateDiaryPost(post);
		}

		await UpdateTables();
	}
}

