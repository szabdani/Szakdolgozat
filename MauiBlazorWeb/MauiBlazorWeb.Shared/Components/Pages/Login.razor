@page "/login"

@using MauiBlazorWeb.Shared.Components.Dialogs
@using Models
@using Interfaces
@using Blazored.LocalStorage

@inject NavigationManager Navigation
@inject IPasswordHasher _pw
@inject IAppState _appState
@inject ILocalStorageService _localStorage

@if (_appState.IsLoggedIn)
{
    <div class="row">
        <div class="col m-2" style="background-color: #ffefef">
            <h1>You are already logged in!</h1>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col m-2" style="background-color: #ffefef">
            <EditForm EditContext=editContext OnSubmit=ProcessLogin>
                <DataAnnotationsValidator />
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Username:</label>
                    <div class="col-sm-2" @ref="startUsername">
                        <InputText class="form-control" @bind-Value=newAccount.LoginUsername />
                    </div>
                    <div class="col-sm-3 d-flex align-items-center">
                        <ValidationMessage For="@(() => newAccount.LoginUsername)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Password:</label>
                    <div class="col-sm-2">
                        <InputText class="form-control" type="password" @bind-Value=newAccount.LoginPassword />
                    </div>
                    <div class="col-sm-3 d-flex align-items-center">
                        <ValidationMessage For="@(() => newAccount.LoginPassword)" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-2">
                        <input type="submit" class="btn btn-warning flex-column" value="Log In" />
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private LoginRegUser newAccount;
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    private ElementReference startUsername;

    public Login()
    {
        newAccount = new LoginRegUser();
        editContext = new EditContext(newAccount);
        messageStore = new ValidationMessageStore(editContext);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InvokeAsync(() => _appState.Title = "Login");
            await InvokeAsync(() => _appState.MainLayout.RerenderLayout());
            if (!_appState.IsLoggedIn)
                await startUsername.FocusAsync();
        }
    }

    private async Task ProcessLogin()
    {
        await InvokeAsync(() => _appState.MainLayout.SetLoadingScreen(true));

        bool userExists = false;
        messageStore.Clear();
        
        await _appState.UpdateExistingUsers();

        foreach (var user in _appState.ExistingUsers)
        {
            if (user.Username.Equals(newAccount.LoginUsername))
            {
                userExists = true;
                break;
            }
        }

        if (userExists)
        {
            if (newAccount.LoginPassword != "")
            {
                var userData = _appState.ExistingUsers.FirstOrDefault(user => user.Username.Equals(newAccount.LoginUsername));
                if (userData is null || userData.Password_hash is null || userData.Password_salt is null)
                    throw new Exception("Invalid username request while logging in");

                if (_pw.VerifyPassword(userData.Password_hash, userData.Password_salt, newAccount.LoginPassword))
                {
                    await _appState.Login(userData, _localStorage);
                    Navigation.NavigateTo("", forceLoad: true);
                }
                else
                {
                    messageStore.Add(() => newAccount.LoginPassword, "Incorrect password.");
                }
            }
            else
            {
                messageStore.Add(() => newAccount.LoginPassword, "You must enter your password.");
            }
        }
        else
        {
            messageStore.Add(() => newAccount.LoginUsername, "This username is not registered.");
        }

        await InvokeAsync(() => _appState.MainLayout.SetLoadingScreen(false));
    }
}
