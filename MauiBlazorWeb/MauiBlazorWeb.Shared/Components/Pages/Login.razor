@page "/login"

@using Blazored.LocalStorage
@using MauiBlazorWeb.Shared.Components.Dialogs
@using Models
@using Interfaces

@inject NavigationManager Navigation
@inject IPasswordHasher _passwordHasher
@inject IAppState _appState
@inject IAccountAPIService _accountAPI
@inject ILocalStorageService _localStorage

@if (_appState.IsLoggedIn)
{
    <LoggedIn/>
}
else
{
    <div class="row">
        <div class="col m-2" style="background-color: #ffefef">
            <EditForm EditContext=editContext OnSubmit=OnProcessLogin>
                <DataAnnotationsValidator />
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Username:</label>
                    <div class="col-sm-2" @ref="startUsername">
                        <InputText class="form-control" @bind-Value=newAccount.LoginUsername />
                    </div>
                    <div class="col-sm-3 d-flex align-items-center">
                        <ValidationMessage For="@(() => newAccount.LoginUsername)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Password:</label>
                    <div class="col-sm-2">
                        <InputText class="form-control" type="password" @bind-Value=newAccount.LoginPassword />
                    </div>
                    <div class="col-sm-3 d-flex align-items-center">
                        <ValidationMessage For="@(() => newAccount.LoginPassword)" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-2">
                        <input type="submit" class="btn btn-warning flex-column" value="Log In" />
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private LoginRegUser newAccount = new();
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    private ElementReference startUsername;

    public Login()
    {
        editContext = new EditContext(newAccount);
        messageStore = new ValidationMessageStore(editContext);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await InvokeAsync(() => _appState.Title = "Login");
            await InvokeAsync(() => _appState.MainLayout.RerenderLayout());
            if (!_appState.IsLoggedIn)
                await startUsername.FocusAsync();
        }
    }

    private async Task OnProcessLogin()
    {
        await _appState.ShowLoadingScreenWhileAwaiting(ProcessLogin);
    }

    private async Task ProcessLogin()
    {
        messageStore.Clear();
        
        await _appState.UpdateExistingUsers(_accountAPI);

        if (_appState.Usernames.Contains(newAccount.LoginUsername))
        {
            if (newAccount.LoginPassword != "")
            {

                if (await _appState.Login(newAccount, _accountAPI, _localStorage, _passwordHasher))
                {
                    Navigation.NavigateTo("", true);
                }
                else
                {
                    messageStore.Add(() => newAccount.LoginPassword, "Incorrect password.");
                }
            }
            else
            {
                messageStore.Add(() => newAccount.LoginPassword, "You must enter your password.");
            }
        }
        else
        {
            messageStore.Add(() => newAccount.LoginUsername, "This username is not registered.");
        }
    }
}
