@inherits EditDialog
@using Interfaces
@using Models

@inject IPasswordHasher _pw
@inject IAppState _appState

@implements IDisposable

<div class="row">
    <EditForm EditContext=pwCheckContext>
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col">
                Type in current password:
            </div>
            <div class="col">
                <InputText class="form-control" type="password" @bind-Value=pwInput />
            </div>
        </div>
        <div class="row">
            <ValidationMessage For="@(() => pwInput)" />
        </div>
    </EditForm>
</div>
<div class="row">
    <EditForm EditContext=editContext>
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col">
                New password:
            </div>
            <div class="col">
                <InputText class="form-control" type="password" @bind-Value=newAccount.Password1 />
            </div>
        </div>
        <div class="row">
            <div class="col">
                Confirmation password:
            </div>
            <div class="col">
                <InputText class="form-control" type="password" @bind-Value=newAccount.Password2 />
            </div>
        </div>
        <div class="row">
            <ValidationMessage For="@(() => newAccount.Password1)" />
            <ValidationMessage For="@(() => newAccount.Password2)" />
        </div>
    </EditForm>
</div>
<div class="row">
    <button type="submit" class="btn btn-primary" disabled=@isError @onclick="Enter">Enter</button>
</div>

@code {
    private bool isError = true;
    private bool isFirstPwError = true;
    private bool isSecondPwError = true;

    private string pwInput = "";
    private EditContext pwCheckContext;
    private ValidationMessageStore pwMessageStore;
    public EditPasswordDialog()
    {
        pwCheckContext = new EditContext(pwInput);
        pwMessageStore = new ValidationMessageStore(pwCheckContext);
        pwCheckContext.OnFieldChanged += HandleFirstFieldChanged; 

        editContext.OnFieldChanged += HandleSecondFieldChanged;
    }
    public void Dispose()
    {
        pwCheckContext.OnFieldChanged -= HandleFirstFieldChanged;
        editContext.OnFieldChanged -= HandleSecondFieldChanged;
    }


    private void HandleFirstFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        isError = true;
        pwMessageStore.Clear();
        if (_pw.VerifyPassword(_appState.CurrentUser.Password_hash, _appState.CurrentUser.Password_salt, pwInput))
        {
            pwCheckContext.Validate();
            isFirstPwError = false;
        }
        else
        {
            pwMessageStore.Add(() => pwInput, "Incorrect password.");
            isFirstPwError = true;
        }
        if (!isFirstPwError && !isSecondPwError)
            isError = false;
        StateHasChanged(); 
    }

    private void HandleSecondFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        isError = true;
        messageStore.Clear();
        isSecondPwError = !editContext.Validate();

        if (!isSecondPwError)
        {
            if (pwInput.Equals(newAccount.Password1))
            {     
                isSecondPwError = true;
                messageStore.Add(() => newAccount.Password2, "New password cannot be the same as old password");
            }
        }  

        if (!isFirstPwError && !isSecondPwError)
            isError = false;
        StateHasChanged();
    }

    private async Task Enter()
    {
        IDataAccess _data = new DataAccess();

        byte[] pw_salt = _pw.GenerateSalt();
        byte[] pw_hash = _pw.Hash(newAccount.Password1, pw_salt);

        string sql = "update account set password_hash = @hash, password_salt = @salt where id = @userid;";
        int affectedRows = await _data.SaveData(sql, new { @hash = pw_hash, @salt = pw_salt, @userid = _appState.CurrentUser.Id });
        if (affectedRows == 1)
        {
            _appState.CurrentUser.Password_hash = pw_hash;
            _appState.CurrentUser.Password_salt = pw_salt;
            await InvokeAsync(StateHasChanged);
        }
        else
            throw new Exception("Error editing Birthdate.");
    }
}