@using Interfaces
@using Models
@inject IAppState _appState

@if (IsVisible)
{
    <div class="modal fade show" style="display:block" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editing @Title</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Hide"></button>
                </div>
                <div class="modal-body">
                    @ChildContent
                    <div class="row">
                        <div class="col-sm">
                            New @Title:
                        </div>
                        <div class="col-sm">
                            @if (IsVisible)
                            {
                                var property = _appState.CurrentUser.GetUserProperty(Title);
                                var type = property.GetType();
                                switch (property)
                                {
                                    case string val:
                                        <div class="col-sm-2">
                                            <InputText class="form-control" @bind-Value=newAccount.Username />
                                        </div>
                                        break;
                                    case byte[] val:
                                        <div class="form-group row">
                                            <label class="col-sm-2 col-form-label">Password:</label>
                                            <div class="col-sm-2">
                                                <InputText class="form-control" type="password" @bind-Value=newAccount.Password1 />
                                            </div>
                                            <div class="col-sm-3 d-flex align-items-center">
                                                <ValidationMessage For="@(() => newAccount.Password1)" />
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <label class="col-sm-2 col-form-label">Confirmation password:</label>
                                            <div class="col-sm-2">
                                                <InputText class="form-control" type="password" @bind-Value=newAccount.Password2 />
                                            </div>
                                            <div class="col-sm-3 d-flex align-items-center">
                                                <ValidationMessage For="@(() => newAccount.Password2)" />
                                            </div>
                                        </div>
                                        break;
                                    case DateTime val:
                                        <div class="form-group row">
                                            <label class="col-sm-2 col-form-label">Date of birth (MM/dd/yyyy):</label>
                                            <div class="col-sm-2">
                                                <InputDate class="form-control" @bind-Value=newAccount.Birthdate />
                                            </div>
                                        </div>
                                        break;
                                    case GenderType val:
                                        <div class="form-group row">
                                            <label class="col-sm-2 col-form-label">Gender:</label>
                                            <div class="col-sm-2">
                                                <InputSelect class="form-control" @bind-Value=newAccount.Gender>
                                                    @foreach (var gender in Enum.GetValues(typeof(GenderType)))
                                                    {
                                                        <option value="@gender">@gender</option>
                                                    }
                                                </InputSelect>
                                            </div>
                                        </div>
                                        break;
                                }
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Hide">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="Enter">Enter</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public string Title { get; set; } = "";
    private LoginRegUser newAccount = new LoginRegUser();

    private bool IsVisible { get; set; } = false;
    public void Show() => IsVisible = true;
    public void Hide() => IsVisible = false;

    private async Task Enter()
    {
        
        Hide();    
    }
}

