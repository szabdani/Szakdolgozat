@inherits EditDialog
@using Interfaces
@using Models
@inject IAppState _appState

<div class="row">
    <div class="col">
        Current Email:
    </div>
    <div class="col">
        @_appState.CurrentUser.Email
    </div>
</div>
<div class="row">
    <EditForm EditContext=editContext>
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col">
                New Email:
            </div>
            <div class="col">
                <InputText class="form-control" @bind-Value=newAccount.Email />
            </div>
        </div>
        <div class="row">
            <ValidationMessage For="@(() => newAccount.Email)" />
        </div>
    </EditForm>
</div>
<div class="row">
    <button type="button" class="btn btn-primary" @onclick="Enter">Enter</button>
</div>

@code {
    private async Task Enter()
    {
        bool emailExists = false;
        messageStore.Clear();

        await _appState.UpdateExistingUsers();

        foreach (var user in _appState.ExistingUsers)
        {
            if (newAccount.Email is not null && newAccount.Email.Equals(user.Email))
            {
                emailExists = true;
                break;
            }
        }

        if (newAccount.Email != "")
        {
            if (!newAccount.Email.Equals(_appState.CurrentUser.Email))
            {
                if (!emailExists)
                {
                    IDataAccess _data = new DataAccess();
                    string sql = "update account set email = @name where id = @userid;";
                    int affectedRows = await _data.SaveData(sql, new { @name = newAccount.Email, @userid = _appState.CurrentUser.Id });

                    if (affectedRows == 1)
                    {
                        _appState.CurrentUser.Email = newAccount.Email;
                        await InvokeAsync(StateHasChanged);
                    }
                    else
                        throw new Exception("Error editing email adress.");
                }
                else
                {
                    messageStore.Add(() => newAccount.Email, "This email adress is already used");
                }
            }
            else
            {
                messageStore.Add(() => newAccount.Email, "New email adress must differ from the old one.");
            }
        }
        else
        {
            messageStore.Add(() => newAccount.Email, "New email adress can not be empty.");
        }
    }
}