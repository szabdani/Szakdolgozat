@inherits EditAccountDialog
@using Interfaces
@using Models

@inject IAppState _appState
@inject IAccountAPIService _accountAPI

<div class="row">
    <div class="col">
        Current Username:
    </div>
    <div class="col">
        @_appState.CurrentUser.Username
    </div>
</div>
<div class="row">
    <EditForm EditContext=editContext>
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col">
                New Username:
            </div>
            <div class="col">
                <InputText class="form-control" @bind-Value=newAccount.LoginUsername />
            </div>
        </div>
        <div class="row">
            <ValidationMessage For="@(() => newAccount.LoginUsername)" />
        </div>
    </EditForm>
</div>
<div class="row">
    <button type="button" class="btn btn-primary" @onclick="OnEnter">Enter</button>
</div>

@code {
    private async Task OnEnter()
    {
        await _appState.ShowLoadingScreenWhileAwaiting(Enter);
    }

    private async Task Enter()
    {
        messageStore.Clear();

        await _appState.UpdateExistingUsers(_accountAPI);

        if (newAccount.LoginUsername != "")
        {
            if (!newAccount.LoginUsername.Equals(_appState.CurrentUser.Username))
            {
                if (!_appState.Usernames.Contains(newAccount.LoginUsername))
                {
                    _appState.CurrentUser.Username = newAccount.LoginUsername;
                    bool isCorrect = await _accountAPI.UpdateAccount(_appState.CurrentUser);
                    if (isCorrect)
                        await InvokeAsync(StateHasChanged);
                    else
                        throw new Exception("Error editing username.");
                }
                else
                {
                    messageStore.Add(() => newAccount.LoginUsername, "This username is already taken");
                }
            }
            else
            {
                messageStore.Add(() => newAccount.LoginUsername, "New username must differ from the old one.");
            }
        }
        else
        {
            messageStore.Add(() => newAccount.LoginUsername, "New username can not be empty.");
        }
    }
}