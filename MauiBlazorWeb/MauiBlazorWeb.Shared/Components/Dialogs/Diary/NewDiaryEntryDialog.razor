@using Models.Diaries
@using Interfaces
@inject IAppState _appState
@inject IDataAccess _data
@inject IDiaryManager _diaryManager

@if (isVisible)
{
    <div class="modal fade show" style="display:block" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add a new Date</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Hide"></button>
                </div>
                <EditForm EditContext=editContext OnSubmit=OnAddPosts>
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="form-group row">
                            <div class="col">
                                <label class="col col-form-label">Pick a date:</label>
                            </div>
                            <div class="col">
                                <InputDate class="form-control" @bind-Value=newDate />
                            </div>
                        </div>
                        <div class="form-group row">
                            <div class="col">
                                <ValidationMessage For="@(() => newDate)" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input type="submit" class="btn btn-warning flex-column" value="Add" />
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public Func<Task>? RerenderParent { get; set; }
    [Parameter] public bool IsHabit { get; set; } = false;

    private bool isVisible = false;
    public void Show() => isVisible = true;
    public void Hide() => isVisible = false;

    private DateTime newDate;
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    public NewDiaryEntryDialog()
    {
        newDate = DateTime.Now;
        editContext = new EditContext(newDate);
        messageStore = new ValidationMessageStore(editContext);
    }

    private async Task OnAddPosts()
    {
        await _appState.ShowLoadingScreenWhileAwaiting(AddPosts);
    }

    private async Task AddPosts()
    {
        messageStore.Clear();

        var list = await _diaryManager.GetDiaryPosts(_appState.CurrentUser.Id, IsHabit);
        var uniqueDates = list.Select(obj => obj.Date).Distinct().OrderBy(date => date).ToList();

        if (uniqueDates.Any(d => d.Date.Equals(newDate.Date)))
        {
            messageStore.Add(() => newDate, $"This date is already tracked");
        }
        else
        {
            var existingCols = await _diaryManager.GetDiaryCols(_appState.CurrentUser.Id, IsHabit);
            foreach (var col in existingCols)
            {
                var newPost = new Diary_log_post();
                newPost.Date = newDate;
                newPost.Diary_log_column_Id = col.Id;

                bool isCorrect = await _diaryManager.InsertDiaryPost(newPost);
                if (!isCorrect)
                    throw new Exception($"Sorry, we could not insert post to {col.Name}");
            } 

            if (RerenderParent is not null)
                await InvokeAsync(RerenderParent);
            Hide();
        }
    }
}

