@using Models.Diaries
@using Interfaces
@inject IAppState _appState
@inject IDataAccess _data
@inject IDiaryManager _diaryManager

@if (isVisible)
{
    <div class="modal fade show" style="display:block" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit @title</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Hide"></button>
                </div>
                <EditForm EditContext=editContext OnSubmit=EditCol>
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="row">
                            <div class="col">
                                <div class="form-group row">
                                    <label class="col col-form-label">@diaryOrHabit name:</label>
                                </div>
                                <div class="form-group row">
                                    <div class="col">
                                        <div class="col">
                                            <InputText class="form-control" @bind-Value=newCol.Name />
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <div class="col">
                                        <ValidationMessage For="@(() => newCol.Name)" />
                                    </div>
                                </div>
                            </div>
                            @if (!IsHabit)
                            {
                                <div class="form-group row">
                                    <div class="col">
                                        <label class="col col-form-label">Choose a type:</label>
                                    </div>
                                    <div class="col">
                                        <div class="col">
                                            <InputSelect class="form-control" @bind-Value=newCol.Type>
                                                @foreach (var dType in Enum.GetValues(typeof(DiaryColumnType)))
                                                {
                                                    if (!dType.Equals(DiaryColumnType.Habit))
                                                    {
                                                        <option value="@dType">@dType</option>
                                                    }
                                                }
                                            </InputSelect>
                                        </div>
                                    </div>
                                </div>
                                @if (newCol.Type.Equals(DiaryColumnType.NumberRange))
                                {
                                    <div class="col">
                                        <div class="form-group row">
                                            <div class="col">
                                                <label class="col col-form-label">Minimum:</label>
                                            </div>
                                            <div class="col">
                                                <div class="col">
                                                    <InputNumber class="form-control" @bind-Value=newCol.Value_range_min />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <div class="col">
                                                <label class="col col-form-label">Maximum:</label>
                                            </div>
                                            <div class="col">
                                                <div class="col">
                                                    <InputNumber class="form-control" @bind-Value=newCol.Value_range_max />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <div class="col">
                                                <ValidationMessage For="@(() => newCol.Value_range_max)" />
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input type="submit" class="btn btn-warning flex-column" value="Edit" />
                        <input class="btn btn-danger flex-column" @onclick="DeleteCol" value="Delete" />
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public Func<Task>? RerenderParent { get; set; }
    [Parameter] public bool IsHabit { get; set; } = false;

    private string title = "";
    private string diaryOrHabit = "Diary column";
    private bool isVisible = false;
    public void Show(Diary_log_column col)
    {
        newCol = col;
        title = newCol.Name;
        isVisible = true;
    }
    public void Hide() => isVisible = false;

    private Diary_log_column newCol;
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    public EditDiaryColDialog()
    {
        newCol = new Diary_log_column();
        editContext = new EditContext(newCol);
        messageStore = new ValidationMessageStore(editContext);
    }

    protected override async Task OnInitializedAsync()
    {
        if (IsHabit)
        {
            newCol.Type = DiaryColumnType.Habit;
            diaryOrHabit = "Habit";

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task EditCol()
    {
        messageStore.Clear();
        if (newCol.Name != "")
        {
            bool diaryNameUsed = false;

            var diaryCols = await _diaryManager.GetDiaryCols(_appState.CurrentUser.Id, newCol.Type.Equals(DiaryColumnType.Habit));
            foreach (var col in diaryCols)
            {
                if (col.Name.Equals(newCol.Name))
                {
                    diaryNameUsed = true;
                    break;
                }
            }
            if (diaryNameUsed)
            {
                messageStore.Add(() => newCol.Name, $"You already track this {diaryOrHabit}");
            }
            else
            {
                bool isCorrect = await _diaryManager.UpdateDiaryCol(newCol);
                if (isCorrect)
                {
                    newCol = new Diary_log_column();
                    if (RerenderParent is not null)
                        await InvokeAsync(RerenderParent);
                    Hide();
                }
                else
                    throw new Exception($"Sorry, we could not edit {newCol.Name}");
            }
        }
    }

    private async Task DeleteCol()
    {
        bool isCorrect = await _diaryManager.DeleteDiaryCol(newCol);
        if (isCorrect)
        {
            if (RerenderParent is not null)
                await InvokeAsync(RerenderParent);
            Hide();
        }
        else
            throw new Exception($"Sorry, we could not delete {newCol.Name}");
    }
}

