@using Models.Diaries
@using Interfaces
@inject IAppState _appState
@inject IDataAccess _data
@inject IDiaryManager _diaryManager

@if (IsVisible)
{
    <div class="modal fade show" style="display:block" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Track new Habits</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Hide"></button>
                </div>
                <EditForm EditContext=editContext OnSubmit=RegisterHabit>
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="row">
                            <div class="col">
                                <div class="form-group row">
                                    <label class="col col-form-label">New Habit:</label>
                                </div>
                                <div class="form-group row">
                                    <div class="col">
                                        <div class="col">
                                            <InputText class="form-control" @bind-Value=newHabit.Name />
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <div class="col">
                                        <ValidationMessage For="@(() => newHabit.Name)" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input type="submit" class="btn btn-warning flex-column" value="Edit" />
                        <button class="btn btn-danger flex-column" value="Delete" @onclick="DeleteHabit" />
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public Func<Task> RerenderParent { get; set; }

    private bool IsVisible { get; set; } = false;
    public void Show() => IsVisible = true;
    public void Hide() => IsVisible = false;

    private Diary_log_column newHabit;
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    private List<Diary_log_column> habitCols = new List<Diary_log_column>();

    public EditHabitDialog()
    {
        newHabit = new Diary_log_column();
        editContext = new EditContext(newHabit);
        messageStore = new ValidationMessageStore(editContext);
    }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(() => _appState.Title = "Track new Habits");
        await InvokeAsync(() => _appState.MainLayout.RerenderLayout());

        habitCols = await _diaryManager.GetHabitCols(_appState.CurrentUser.Id);
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteHabit()
    {
        
    }

    private async Task RegisterHabit()
    {
        messageStore.Clear();
        if (editContext.Validate())
        {
            bool habitNameUsed = false;

            foreach (var col in habitCols)
            {
                if (col.Name.Equals(newHabit.Name))
                {
                    habitNameUsed = true;
                    break;
                }
            }

            if (habitNameUsed)
            {
                messageStore.Add(() => newHabit.Name, "You already track this habit");
            }
            else
            {
                
            }
        }
    }
}

