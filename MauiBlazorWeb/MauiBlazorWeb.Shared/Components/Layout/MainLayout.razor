@inherits LayoutComponentBase
@using Models
@using Interfaces
@using MauiBlazorWeb.Shared.Components.Dialogs
@using Blazored.LocalStorage    

@inject ILocalStorageService _localStorage
@inject NavigationManager Navigation
@inject IAppState _appState

<PageTitle>
    LifeTracker - @_appState.Title
</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu @ref="navmenu"/>
    </div>

    <main>
        <div class="px-4 py-3 border-bottom h3" style="background-color: #d6abab">
            @_appState.Title
        </div>
        <article class="content px-4">
            @if (isLoading)
            {
                <LoadingScreen />
            }
            <div class= "px-4 py-2 d-grid" style="background-color: #ffe9e9">
                @Body
            </div>
        </article>
    </main>
    <div class="footer">
        <Footer />
    </div>
</div>

@code {
    private NavMenu navmenu;
    private bool isLoading = true;

    public MainLayout()
    {
        navmenu = new NavMenu();
    }

    protected override void OnInitialized()
    {
        _appState.MainLayout = this;
    }

    public async Task RerenderLayout()
    {
        await InvokeAsync(navmenu.RerenderNavMenu);
        await InvokeAsync(StateHasChanged);
    }

    public async Task SetLoadingScreen(bool state)
    {
        isLoading = state;
        await InvokeAsync(StateHasChanged);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!_appState.IsInitialized)
            {
                await _appState.Init(_localStorage);
                Navigation.NavigateTo("", forceLoad: true);
            } 
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }  
    }
}