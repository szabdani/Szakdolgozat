@inherits LayoutComponentBase
@using Models
@using Interfaces
@using MauiBlazorWeb.Shared.Components.Dialogs  

@inject ILocalDataStorage _localStorage
@inject IAppState _appState
@inject IJSRuntime JS

<PageTitle>
    LifeTracker - @_appState.Title
</PageTitle>

<div class="page">
    <div class="sidebar" style="z-index: 1001; min-width: 200px;">
        <NavMenu @ref="navmenu"/>
    </div>

    <main>
        <div class="top-row">
            <h3>@_appState.Title</h3>
        </div>
        <article class="content px-4">
            @if (isLoading)
            {
                <LoadingScreen />
            }
            <div class="px-4 py-2 d-grid" style="background-color: #ffe9e9">
                @Body
            </div>
        </article>
        <div class="footer">
            <Footer />
        </div>
    </main>
</div>

@code {
    private NavMenu navmenu = new();
    private bool isLoading = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _appState.MainLayout = this;
    }

    public async Task RerenderLayout()
    {
        await InvokeAsync(navmenu.RerenderNavMenu);
        await InvokeAsync(StateHasChanged);
    }

    public async Task SetLoadingScreen(bool state)
    {
        isLoading = state;
        await InvokeAsync(StateHasChanged);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (!_appState.IsInitialized)
            {
                await _appState.Init(_localStorage);
                await JS.InvokeVoidAsync("location.reload");
            } 
            isLoading = false;
            await InvokeAsync(RerenderLayout);
        }  
    }
}