@inherits ErrorBoundary

@using Interfaces
@inject IAppState _appState

@if (CurrentException is null)
{
    @ChildContent
}
else
{
    <ErrorBoundary @ref="errorBoundary">
        <ChildContent>
            @ChildContent
        </ChildContent>
        <ErrorContent>
            <div class="alert alert-danger" role="alert">
                <p class="fs-3 fw-bold">Unexpected error occured: @exceptionMessage</p>
                <p class="fs-2">Try again later or switch to a different page</p>
                <button class="btn btn-info" @onclick="ClearError">
                    Refresh
                </button>
            </div>
        </ErrorContent>
    </ErrorBoundary>
}

@code {
    private ErrorBoundary? errorBoundary;
    private string? exceptionMessage;
    protected override async Task OnErrorAsync(Exception ex)
    {
        await InvokeAsync(() => _appState.MainLayout.SetLoadingScreen(false));
        exceptionMessage = ex.Message;
    }
    public void ClearError()
    {
        errorBoundary?.Recover();
    }
}