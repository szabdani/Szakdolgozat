@inherits SportCompBase

@using Bases
@using Models.Sports
@using BlazorBootstrap

@if (isVisible)
{
    <div class="modal fade show" style="display:block" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add a new Exercise</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Hide"></button>
                </div>
                <EditForm EditContext=editContext OnSubmit=OnInsertExercise>
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="row">
                            <div class="col">
                                <div class="form-group row">
                                    <label class="col col-form-label">New Exercise name:</label>
                                </div>
                                <div class="form-group row">
                                    <div class="col">
                                        <InputText class="form-control" @bind-Value=newExercise.Name />
                                    </div>
                                    <div class="col">
                                        <label>
                                            <Switch @bind-Value="isPublic" Label="Public Exercise?" />
                                        </label>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col col-form-label">Exercise type:</label>
                                    <div class="col">
                                        <InputSelect class="form-control" @bind-Value="newExercise.Type">
                                            @foreach (var t in Enum.GetValues(typeof(ExerciseType)))
                                            {
                                                <option value="@t">@t</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col col-form-label">Give a description (optional)</label>
                                </div>
                                <div class="form-group row">
                                    <textarea class="form-control"
                                    @bind="newExercise.Notes"
                                    rows=" 2"
                                    placeholder="Write something about this exercise"
                                    style="resize:vertical;"
                                    oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';">
                                    </textarea>
                                </div>
                                <div class="form-group row">
                                    <div class="col">
                                        <ValidationMessage For="@(() => newExercise.Name)" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input type="submit" class="btn btn-warning flex-column" value="Enter" />
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public required Account_does_Sport AccountDoes { get; set; }
    private bool isVisible = false;
    private bool isPublic = true;

    private Exercise newExercise = new();
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    public NewExerciseDialog()
    {
        editContext = new EditContext(newExercise);
        messageStore = new ValidationMessageStore(editContext);
    }

    public void Show()
    {
        isVisible = true;
        StateHasChanged();
    }

    public void Hide()
    {
        isVisible = false;
        StateHasChanged();
    }

    private async Task OnInsertExercise()
    {
        await AppState.ShowLoadingScreenWhileAwaiting(InsertExercise);
    }

    private async Task InsertExercise()
    {
        messageStore.Clear();
        if (newExercise.Name == "")
        {
            messageStore.Add(() => newExercise.Name, $"You must set a name!");
        }
        else
        {
            bool nameUsed = false;
            var list = await SportAPI.GetExercises(AccountDoes.Account_Id, AccountDoes.Sport_Id);

            foreach (var s in list)
            {
                if (s.Name.Equals(newExercise.Name))
                {
                    nameUsed = true;
                    break;
                }
            }

            if (nameUsed)
            {
                messageStore.Add(() => newExercise.Name, $"An exercise with this name already exists!");
            }
            else
            {
                newExercise.Creator_Account_Id = AccountDoes.Account_Id;
                newExercise.Sport_Id = AccountDoes.Sport_Id;

                if (isPublic)
                {
                    newExercise.Status = SportStatus.Public;
                }
                else
                {
                    newExercise.Status = SportStatus.Private;
                }

                bool isCorrect = await SportAPI.InsertExercise(newExercise);
                if (isCorrect)
                {
                    newExercise = new Exercise();
                    await Task.Run(RefreshSportComps);
                    Hide();
                }
                else
                    throw new Exception($"Sorry, we could not register your Exercise");
            }
        }
    }
}
