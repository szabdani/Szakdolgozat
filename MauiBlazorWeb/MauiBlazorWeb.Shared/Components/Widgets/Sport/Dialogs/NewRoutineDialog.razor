@inherits SportCompBase

@using Bases
@using Models.Sports
@using BlazorBootstrap

@if (isVisible)
{
    <div class="modal fade show" style="display:block" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add a new Routine</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Hide"></button>
                </div>
                <EditForm EditContext=editContext OnSubmit=OnInsertRoutine>
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="row">
                            <div class="col">
                                <div class="form-group row">
                                    <label class="col col-form-label">New Routine name:</label>
                                </div>
                                <div class="form-group row">
                                    <div class="col">
                                        <InputText class="form-control" @bind-Value=newRoutineWorkout.Name />
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col col-form-label">Routine description:</label>
                                </div>
                                <div class="form-group row">
                                    <div class="col">
                                        <textarea class="form-control"
                                        @bind="newRoutineWorkout.Notes"
                                        rows="1"
                                        placeholder="Write something about this routine"
                                        style="resize:vertical; background-color: lightgrey"
                                        oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';">
                                        </textarea>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <div class="col">
                                        <ValidationMessage For="@(() => newRoutineWorkout.Name)" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input type="submit" class="btn btn-warning flex-column" value="Enter" />
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public required int AccountDoesId { get; set; }
    private bool isVisible = false;

    private Routine newRoutine = new();
    private Workout newRoutineWorkout = new();
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    public NewRoutineDialog()
    {
        editContext = new EditContext(newRoutineWorkout);
        messageStore = new ValidationMessageStore(editContext);
    }

    public void Show()
    {
        isVisible = true;
        StateHasChanged();
    }

    public void Hide()
    {
        isVisible = false;
        StateHasChanged();
    }

    private async Task OnInsertRoutine()
    {
        await AppState.ShowLoadingScreenWhileAwaiting(InsertRoutine);
    }

    private async Task InsertRoutine()
    {
        messageStore.Clear();
        if (newRoutineWorkout.Name == "")
        {
            messageStore.Add(() => newRoutineWorkout.Name, $"You must set a name!");
        }
        else
        {
            bool nameUsed = false;

            var allRoutines = await SportAPI.GetRoutines(AccountDoesId);
            var routineIds = allRoutines.Select(r => r.Id);
            var list = await SportAPI.GetWorkouts(AccountDoesId, true);
            var routineExamples = list.Where(w => w.Routine_Id.Equals(routineIds.Any()));

            foreach (var s in routineExamples)
            {
                if (s.Name is not null && s.Name.Equals(newRoutineWorkout.Name))
                {
                    nameUsed = true;
                    break;
                }
            }

            if (nameUsed)
            {
                messageStore.Add(() => newRoutineWorkout.Name!, $"A routine with this name already exists!");
            }
            else
            {
                newRoutineWorkout.IsDone = false;
                newRoutineWorkout.IsRoutineExample = true;
                newRoutineWorkout.Account_does_Sport_Id = AccountDoesId;
                newRoutineWorkout.Starttime = DateTime.Now;

                bool isCorrect = await SportAPI.InsertWorkout(newRoutineWorkout);
                if (!isCorrect)
                    throw new Exception($"Sorry, we could not save your Routine example Workout");

                var workouts = await SportAPI.GetWorkouts(AccountDoesId, true);
                var insertedExample = workouts.Last();


                newRoutine.ExampleWorkout_Id = insertedExample.Id;
                newRoutine.Account_does_Sport_Id = AccountDoesId;

                isCorrect = await SportAPI.InsertRoutine(newRoutine);
                if (isCorrect)
                {
                    var routines = await SportAPI.GetRoutines(AccountDoesId);
                    var insertedRoutine = routines.Last();

                    insertedExample.Routine_Id = insertedRoutine.Id;
                    isCorrect = await SportAPI.UpdateWorkout(insertedExample);
                    if (!isCorrect)
                        throw new Exception($"Sorry, we could not update your Routine example Workout");

                    newRoutine = new Routine();
                    await Task.Run(RefreshSportComps);
                    Hide();
                }
                else
                    throw new Exception($"Sorry, we could not insert your Routine");
            }
        }
    }
}
