@inherits SportCompBase

@using Bases
@using MauiBlazorWeb.Shared.Components.Icons
@using Models.Sports
@using BlazorBootstrap

<div class="row">
	<div class="col text-center">
		<h3>Your workouts @titleStr</h3>
	</div>
</div>
<div class="row">
	<div class="col-auto">
		<button class="btn btn-info" @onclick="() => MoveViewIndex(false)" disabled="@isPrevDisabled">
			<IconLeft />
		</button>
	</div>
	<div class="col-auto">
		<h5>Switch charts</h5>
	</div>
	<div class="col-auto">
		<button class="btn btn-info" @onclick="() => MoveViewIndex(true)" disabled="@isNextDisabled">
			<IconRight />
		</button>
	</div>
	<div class="col-auto float-end">
		<InputSelect class="form-control" @bind-Value="timeSpan" @bind-Value:after="UpdateObserver">
			@foreach (var t in Enum.GetValues(typeof(TimeFilter.TimePeriod)))
			{
				<option value="@t">@t</option>
			}
		</InputSelect>
	</div>
</div>
<div class="row">
	<div class="col">
		<table class="table table-striped">
			<tbody>
				<tr>
					<td>#</td>
					<td>
						@numberOfWorkouts/@dayCountByFilter
					</td>
				</tr>
				<tr>
					<td>%</td>
					<td>
						@((numberOfWorkouts / (double)dayCountByFilter).ToString("0.##%"))
					</td>
				</tr>
				<tr>
					<td>Time</td>
					<td>
						@totalDuration.ToString(@"hh\:mm\:ss")
					</td>
				</tr>
				<tr>
					<td>Average Time</td>
					<td>
						@averageDuration.ToString(@"hh\:mm\:ss")
					</td>
				</tr>
			</tbody>
		</table>
	</div>
</div>
<div class="row">
	<div class="col">
		<BarChart @ref="barChart" />
	</div>
</div>


@code {
	[Parameter]
	public int AccountDoesId { get; set; }

	private List<Workout> filteredWorkouts = [];
	private List<DateTime> uniqueDates = [];
	private List<DateTime> filteredDays = [];

	private string titleStr = "";
	private int dayCountByFilter = 0;
	private int numberOfWorkouts = 0;
	private TimeSpan totalDuration = new();
	private TimeSpan averageDuration = new();

	private bool isChartInit = false;
	private TimeFilter.TimePeriod timeSpan = new();

	private int viewIndex = 0;
	private int viewMaxIndex = 1;
	private bool isPrevDisabled => viewIndex == 0;
	private bool isNextDisabled => viewIndex == viewMaxIndex;

	private BarChart barChart = new();
	private ChartData chartData = new();

	private BarChartOptions barChartOptions;

	public SportStat()
	{
		barChartOptions = new BarChartOptions();
		barChartOptions.Responsive = true;

		barChartOptions.Scales = new Scales
		{
			X = new ChartAxes { Title = new ChartAxesTitle { Text = "Dates", Display = true } },
			Y = new ChartAxes { Title = new ChartAxesTitle { Text = "Duration (Minutes)", Display = true } }
		};
		barChartOptions.Plugins.Legend.Display = false;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			await UpdateTables();
			await barChart.InitializeAsync(chartData, barChartOptions);
			isChartInit = true;
		}
	}

	private async Task MoveViewIndex(bool increase)
	{
		viewIndex += increase ? 1 : -1;

		await UpdateObserver();
	}

	protected override async Task UpdateTables()
	{
		await base.UpdateTables();

		switch (timeSpan)
		{
			case TimeFilter.TimePeriod.Week:
				titleStr = "in the past 7 days";
				break;
			case TimeFilter.TimePeriod.Month:
				titleStr = "in the past month";
				break;
			case TimeFilter.TimePeriod.Year:
				titleStr = "this year";
				break;
			case TimeFilter.TimePeriod.All:
				titleStr = "since registration";
				break;
		}


		filteredDays = allDatesSinceReg.Where(d => TimeFilter.FilterByTimePeriod(d, DateTime.Today, timeSpan)).ToList();
		dayCountByFilter = filteredDays.Count();

		var workouts = await SportAPI.GetWorkouts(AccountDoesId, false);
		filteredWorkouts = workouts.Where(w => TimeFilter.FilterByTimePeriod(w.Starttime, DateTime.Today, timeSpan)).ToList();
		uniqueDates = filteredWorkouts.Select(w => w.Starttime.Date).Distinct().ToList();
		numberOfWorkouts = filteredWorkouts.Count();

		var durations = filteredWorkouts.Select(w => w.Duration).ToList();
		totalDuration = durations.Aggregate(TimeSpan.Zero, (sum, duration) => sum + duration);
		averageDuration = TimeSpan.FromTicks((totalDuration.Ticks / dayCountByFilter));

		GenerateBarChartData();

		if (isChartInit)
			await barChart.UpdateAsync(chartData, barChartOptions);
	}

	private void GenerateBarChartData()
	{
		List<string> labels = new List<string>();
		List<double?> durationTimes = new List<double?>();

		foreach (var day in filteredDays)
		{
			double? data = 0;

			string dateString;
			switch (timeSpan)
			{
				case TimeFilter.TimePeriod.Year:
					dateString = day.ToString("MMM dd");
					break;
				case TimeFilter.TimePeriod.All:
					dateString = day.ToString("yyyy MMM dd");
					break;
				default:
					dateString = day.ToString("dd");
					break;
			}

			switch (viewIndex)
			{
				case 0:
					var durations = filteredWorkouts.Where(w => w.Starttime.Date == day.Date).Select(w => w.Duration).ToList();
					var sumDuration = durations.Aggregate(TimeSpan.Zero, (sum, duration) => sum + duration);

					data = sumDuration.TotalMinutes;
					barChartOptions.Scales.Y!.Title!.Text = "Duration (mins)";
					break;
				case 1:
					data = filteredWorkouts.Where(w => w.Starttime.Date == day.Date).Count();
					barChartOptions.Scales.Y!.Title!.Text = "# of workouts";
					break;
			}


			labels.Add(dateString);
			durationTimes.Add(data);
		}


		var datasets = new List<IChartDataset>();
		var dataset1 = new BarChartDataset() { Data = durationTimes };

		datasets.Add(dataset1);

		chartData = new ChartData{ Labels = labels, Datasets = datasets };

		double? total = durationTimes.Max();
		barChartOptions.Scales.Y!.Max = total;
	}
}
