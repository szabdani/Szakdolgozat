@inherits SportCompBase

@using Bases
@using Models.Sports
@using MauiBlazorWeb.Shared.Components.Widgets.Sport.Dialogs

@for(int i=0; i < usersSports.Count/3+1; i++)
{
	<div class="row">
		@for (int j=0; j < 3; j++)
		{
			if (i*3+j < usersSports.Count)
			{
				<div class="col m-2" style="background-color: navajowhite">
					<SportSummary Sport="usersSports[i*3+j]" />
				</div>
			}
		}
	</div>
}

<div class="row" style="background-color: navajowhite">
	<div class="col m-2">
		<InputSelect class="form-control" @bind-Value=sportId>
			<option value=0>Select an existing Sport</option>
			@foreach (var s in notTrackedSports)
			{
				<option value="@s.Id">@s.Name</option>
			}
		</InputSelect>
	</div>
	<div class="col">
		<button class="btn btn-info" @onclick="OnAddSport" disabled="@(sportId == 0)">Start tracking!</button>
	</div>
	<div class="col">
		<button class="btn btn-info" @onclick="() => newSportDialog.Show()">Or add a new Sport!</button>
	</div>
</div>
<NewSportDialog OnAddAction="OnOpenSport" @ref=newSportDialog />

@code {
	private int sportId = 0;
	private List<Sport> allSports = new();
	private List<Sport> usersSports = new();
	private List<Sport> notTrackedSports = new();

	private NewSportDialog newSportDialog = new();


	protected override async Task UpdateTables()
	{
		await base.UpdateTables();

		usersSports = await SportAPI.GetAccountsSports(AppState.CurrentUser.Id);
		allSports = await SportAPI.GetAllSports(AppState.CurrentUser.Id);
		notTrackedSports = allSports.Where(sport => !usersSports.Any(s => s.Id == sport.Id)).ToList();
	}

	private async Task OnOpenSport()
	{
		await AppState.ShowLoadingScreenWhileAwaiting(OpenSport);
	}
	private async Task OnAddSport()
	{
		await AppState.ShowLoadingScreenWhileAwaiting(AddSport);
	}


	private async Task OpenSport()
	{
		sportId = allSports.Last(s => s.Creator_Account_Id == AppState.CurrentUser.Id).Id;
		await AddSport();
	}

	private async Task AddSport()
	{
		Account_does_Sport newAccountDoes = new Account_does_Sport { Account_Id = AppState.CurrentUser.Id, Sport_Id = sportId };
		bool isCorrect = await SportAPI.InsertAccountDoesSport(newAccountDoes);
		if (!isCorrect)
			throw new Exception($"Sorry, we could not add Sport with id:{sportId} to your account");

		await Task.Run(RefreshSportComps);
	}
}