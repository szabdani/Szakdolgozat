@page "/sports/id={AccountDoesId:int}"
@inherits SportCompBase

@using Bases
@using MauiBlazorWeb.Shared.Components.Dialogs
@using Models.Sports

@if (!_appState.IsLoggedIn)
{
	<NotLoggedIn />
}
else if (hasInvalidParameter)
{
	<h3>This is not a valid path to a Sport Page</h3>
}
else
{
	<div class="row">
		<div class="col-auto m-2" style="background-color: navajowhite; max-width: 400px">
			<SportsCalendar AccountDoesId="AccountDoesId" />
		</div>
		<div class="col m-2" style="background-color: navajowhite">
			<SportStat AccountDoesId="AccountDoesId" />
		</div>
		<div class="col m-2" style="background-color: navajowhite">
			<ExerciseLibrary AccountDoesId="AccountDoesId" />
		</div>
	</div>
	<div class="row">
		<div class="col-auto m-2" style="background-color: navajowhite; max-width: 400px">
			<RoutineTable AccountDoesId="AccountDoesId" />
		</div>
		<div class="col m-2" style="background-color: navajowhite">
			<WorkoutsListed />
		</div>
	</div>
}

@code {
	[Parameter, EditorRequired]
	public int AccountDoesId { get; set; }
	private Account_does_Sport accountDoesSport;
	private Sport sport;

	public SportPage()
	{
		accountDoesSport = new Account_does_Sport();
		sport = new Sport();
	}

	protected override async Task ValidateParameters()
	{
		accountDoesSport = ValidateAccountDoesSport(AccountDoesId);
		sport = ValidateSport(accountDoesSport.Sport_Id);

		await base.ValidateParameters();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			if (!hasInvalidParameter)
				await InvokeAsync(() => _appState.Title = sport.Name);
			else
				await InvokeAsync(() => _appState.Title = "Invalid Sport");

			await InvokeAsync(() => _appState.MainLayout.RerenderLayout());
		}
	}
}