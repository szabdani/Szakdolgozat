@inherits SportCompBase

@using Bases
@using Models.Sports
@using MauiBlazorWeb.Shared.Components.Dialogs
@using MauiBlazorWeb.Shared.Components.Icons
@using MauiBlazorWeb.Shared.Components.Widgets.Sport.Dialogs

<div class="row" style="background-color: lightgrey">
	<div class="col-auto" style="word-wrap: break-word;">
		<h3>@sport.Name</h3>
	</div>
	<div class="col w-auto float-end">
		@if (sport.Creator_Account_Id == AppState.CurrentUser.Id)
		{
			<button class="btn btn-warning" @onclick="()=> editSportDialog.Show(sport)">
				<IconEdit />
			</button>
			<button class="btn btn-danger" @onclick="() => warningDelete.Show()">
				<IconDelete />
			</button>
		}
		<button class="btn btn-secondary float-end" @onclick="()=> warningUnFollow.Show()">Unfollow</button>
	</div>
</div>

<div class="row my-1">
	<div class="col">
		<div class="row">
			<button class="btn btn-primary" @onclick="StartWorkoutPage">
				<IconAdd /> Start a new workout
			</button>
		</div>
		<div class="row">
			<button class="btn btn-primary" @onclick="()=> newRoutineDialog!.Show()">
				<IconAdd /> Create a new routine!
			</button>
		</div>
		<div class="row">
			<button class="btn btn-info" @onclick="GoToPage">Go to @sport.Name page</button>
		</div>
	</div>
	<div class="col">
		<RoutineTable AccountDoesId="accountDoes.Id" />
	</div>
</div>



<WarningDialog Title="Unfollowing a Sport" OnAcceptAction="OnUnfollow" @ref="warningUnFollow">
	By unfollowing @sport.Name you will lose all your routines and workouts for this Sport?<br />
	This action can not be undone!
</WarningDialog>

<WarningDialog Title="Deleting a Sport" OnAcceptAction="OnDeleteSport" @ref="warningDelete">
	Do you want to delete @sport.Name?<br />
	This action can not be undone!
</WarningDialog>

<EditSportDialog @ref=editSportDialog />
<NewRoutineDialog AccountDoesId="accountDoes.Id" @ref=newRoutineDialog />

@code {
	[Parameter]
	public required int SportId { get; set; }

	private WarningDialog warningUnFollow = new();
	private WarningDialog warningDelete = new();
	private EditSportDialog editSportDialog = new();
	private NewRoutineDialog? newRoutineDialog;

	private Account_does_Sport accountDoes = new();
	private Sport sport = new();

	protected override async Task ValidateParameters()
	{
		sport = ValidateSport(SportId);

		var list = await SportManager.GetAccountDoesSport(AppState.CurrentUser.Id, sport.Id);
		var first = list.FirstOrDefault();
		if (first != null)
			accountDoes = first;

		await base.ValidateParameters();
	}

	private void GoToPage()
	{
		Navigation.NavigateTo($"sports/id={accountDoes.Id}", true);
	}

	private async Task StartWorkoutPage()
	{
		if (accountDoes == null)
			throw new Exception($"Sorry, this Sport is not followed.");
		else
			await OnStartWorkout(accountDoes.Id);
	}

	private async Task OnUnfollow()
	{
		await AppState.ShowLoadingScreenWhileAwaiting(Unfollow);
		Navigation.Refresh(true);
	}

	private async Task Unfollow()
	{
		if(accountDoes == null)
			throw new Exception($"Sorry, we could not unfollow {sport.Name}.");

		bool isCorrect = await SportManager.DeleteAccountDoesSport(accountDoes);
		if (!isCorrect)
			throw new Exception($"Sorry, we could not unfollow {sport.Name}.");
	}

	private async Task OnDeleteSport()
	{
		await AppState.ShowLoadingScreenWhileAwaiting(DeleteSport);
		Navigation.Refresh(true);
	}

	private async Task DeleteSport()
	{
		await Unfollow();
		bool isCorrect = await SportManager.DeleteSport(sport);
		if (!isCorrect)
			throw new Exception($"Sorry, we could not delete {sport.Name}.");
	}
}
