@inherits SportCompBase

@using Bases
@using Models.Sports
@using MauiBlazorWeb.Shared.Components.Widgets.Sport.Dialogs
@using MauiBlazorWeb.Shared.Components.Dialogs
@using MauiBlazorWeb.Shared.Components.Icons

<div class="row">
	<div class="col-auto" style="word-wrap: break-word;">
		<h3>Exercise library</h3>
	</div>
	<div class="col-auto float-end">
		<InputSelect class="form-control" @bind-Value="filterType" @bind-Value:after="@RefreshSportComps">
			<option value="-1">All</option>
			@foreach (var t in Enum.GetValues(typeof(ExerciseType)))
			{
				<option value="@((int)t)">@t</option>
			}
		</InputSelect>
	</div>
</div>

<div class="row">
	<div class="col">
		<div class="table-responsive" style="max-height: 400px;">
			<table class="table table-striped text-center">
				<thead class="thead-light" style="position: sticky; top: 0; background-color: navajowhite">
					<tr>
						<th>
							Name
						</th>
						<th>
							Type
						</th>
						<th>
							Open
						</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var ex in filteredExercises)
					{
						<tr>
							<td>
								@ex.Name
							</td>
							<td>
								@ex.Type
							</td>
							<td>
								@if (ex.Creator_Account_Id == _appState.CurrentUser.Id)
								{
									<button class="btn btn-warning" @onclick="() => editExerciseDialog.Show(ex)">
										<IconEdit />
									</button>
									<button class="btn btn-danger" @onclick="() => OpenDeleteExercise(ex)">
										<IconDelete />
									</button>
								}
								<button class="btn btn-info" @onclick="() => exerciseDialog.Show(ex)">
									<IconAdd />
								</button>
							</td>
						</tr>
					}
					<tr>
						<td colspan="3">
							<button class="btn btn-info" @onclick="() => newExerciseDialog.Show()">
								Add a new Exercise! <IconAdd />
							</button>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
</div>

<WarningDialog Title="Deleting an Exercise" OnAcceptAction="OnDeleteExercise" @ref="warningDelete">
	Do you want to delete @selectedExercise.Name?<br />
	This action can not be undone!
</WarningDialog>

<ExerciseDialog @ref="exerciseDialog" />
<NewExerciseDialog AccountDoes="accountDoes" @ref="newExerciseDialog"/>
<EditExerciseDialog AccountDoes="accountDoes" @ref="editExerciseDialog" />

@code {
	[Parameter, EditorRequired]
	public int AccountDoesId { get; set; }
	private Account_does_Sport accountDoes;

	private int filterType = -1;
	private Exercise selectedExercise;
	private List<Exercise> allExercises;
	private List<Exercise> filteredExercises;

	private WarningDialog warningDelete;
	private EditExerciseDialog editExerciseDialog;
	private NewExerciseDialog newExerciseDialog;
	private ExerciseDialog exerciseDialog;

	public ExerciseLibrary()
	{
		accountDoes = new Account_does_Sport();

		selectedExercise = new Exercise();
		allExercises = new List<Exercise>();
		filteredExercises = new List<Exercise>();

		warningDelete = new WarningDialog();
		editExerciseDialog = new EditExerciseDialog();
		newExerciseDialog = new NewExerciseDialog();
		exerciseDialog = new ExerciseDialog();
	}

	protected override async Task ValidateParameters()
	{
		accountDoes = ValidateAccountDoesSport(AccountDoesId);
		await base.ValidateParameters();
	}

	protected override async Task UpdateTables()
	{
		await base.UpdateTables();

		allExercises = await _sportManager.GetExercises(accountDoes.Account_Id, accountDoes.Sport_Id);

		if (filterType != -1)
			filteredExercises = allExercises.Where(ex => (int)ex.Type == filterType).ToList();
		else
			filteredExercises = allExercises;
	}

	private void OpenDeleteExercise(Exercise ex)
	{
		selectedExercise = ex;
		warningDelete.Show();
	}

	private async Task OnDeleteExercise()
	{
		await _appState.ShowLoadingScreenWhileAwaiting(DeleteExercise);
	}

	private async Task DeleteExercise()
	{
		bool isCorrect = await _sportManager.DeleteExercise(selectedExercise);
		if (!isCorrect)
			throw new Exception($"Sorry, we could not delete {selectedExercise.Name}.");
		await RefreshSportComps();
	}
}
