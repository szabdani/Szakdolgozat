@inherits SportCompBase

@using Bases
@using Models.Sports
@using MauiBlazorWeb.Shared.Components.Widgets.Sport.Dialogs
@using MauiBlazorWeb.Shared.Components.Dialogs
@using MauiBlazorWeb.Shared.Components.Icons

@if (allExercises.Count == 0 && IsInWorkout)
{
	<h4>
		Sorry, there are no exercises for this Sport.<br/>
		You can add exercises by exiting this workout and going to the Sport's page.
	</h4>
}
else
{
	<div class="row">
		<div class="col-auto" style="word-wrap: break-word;">
			<h3>Exercise library</h3>
		</div>
		<div class="col-auto float-end">
			<InputSelect class="form-control" @bind-Value="filterType" @bind-Value:after="UpdateObserver">
				<option value="-1">All</option>
				@foreach (var t in Enum.GetValues(typeof(ExerciseType)))
				{
					<option value="@((int)t)">@t</option>
				}
			</InputSelect>
		</div>
	</div>

	<div class="row">
		<div class="col">
			<div class="table-responsive" style="max-height: 450px;">
				<table class="table table-striped text-center">
					<thead class="thead-light" style="position: sticky; top: 0; background-color: navajowhite">
						<tr>
							<th>Name</th>
							<th>Description</th>
							<th>Type</th>
							<th>Open</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var ex in filteredExercises)
						{
							<tr>
								<td>
									@ex.Name
								</td>
								<td>
									@(ex.Notes ?? "-")
								</td>
								<td>
									@ex.Type
								</td>
								<td>
									@if (ex.Creator_Account_Id == AppState.CurrentUser.Id && !IsInWorkout)
									{
										<button class="btn btn-warning" @onclick="() =>{if(editExerciseDialog is not null) {editExerciseDialog?.Show(ex);}}">
											<IconEdit />
										</button>
										<button class="btn btn-danger" @onclick="() => OpenDeleteExercise(ex)">
											<IconDelete />
										</button>
									}
									<button class="btn btn-info" @onclick="() => OnAdd(ex)">
										<IconAdd />
									</button>
								</td>
							</tr>
						}
					</tbody>
						@if (!IsInWorkout)
						{
							<tfoot>
								<tr>
									<td colspan="4">
									<button class="btn btn-info" @onclick="() =>{if(newExerciseDialog is not null) {newExerciseDialog?.Show();}}">
											Add a new Exercise! <IconAdd />
										</button>
									</td>
								</tr>
							</tfoot>
						}
				</table>
			</div>
		</div>
	</div>
}

<WarningDialog Title="Deleting an Exercise" OnAcceptAction="OnDeleteExercise" @ref="warningDelete">
	Do you want to delete @selectedExercise.Name?<br />
	This action can not be undone!
</WarningDialog>

<ExerciseDialog @ref="exerciseDialog" />
<NewExerciseDialog AccountDoes="accountDoes" @ref="newExerciseDialog"/>
<EditExerciseDialog AccountDoes="accountDoes" @ref="editExerciseDialog" />

@code {
	[Parameter] public required int AccountDoesId { get; set; }
	[Parameter] public required bool IsInWorkout { get; set; }
	[Parameter] public Func<Exercise, Task>? OnAddAction { get; set; }

	private Account_does_Sport accountDoes = new();

	private int filterType = -1;
	private Exercise selectedExercise = new();
	private List<Exercise> allExercises = new();
	private List<Exercise> filteredExercises = new();

	private WarningDialog warningDelete = new();
	private ExerciseDialog exerciseDialog = new();

	private EditExerciseDialog? editExerciseDialog;
	private NewExerciseDialog? newExerciseDialog;

	protected override async Task ValidateParameters()
	{
		accountDoes = await ValidateAccountDoesSport(AccountDoesId);
		await base.ValidateParameters();
	}

	protected override async Task UpdateTables()
	{
		await base.UpdateTables();

		allExercises = await SportAPI.GetExercises(accountDoes.Account_Id, accountDoes.Sport_Id);

		if (filterType != -1)
			filteredExercises = allExercises.Where(ex => (int)ex.Type == filterType).ToList();
		else
			filteredExercises = allExercises;
	}

	private async Task OnAdd(Exercise ex)
	{
		if (!IsInWorkout)
		{
			await exerciseDialog.Show(ex);
		}
		else
		{
			if (OnAddAction is not null)
			{
				await OnAddAction.Invoke(ex);
			}
		}
	}

	private void OpenDeleteExercise(Exercise ex)
	{
		selectedExercise = ex;
		warningDelete.Show();
	}

	private async Task OnDeleteExercise()
	{
		await AppState.ShowLoadingScreenWhileAwaiting(DeleteExercise);
	}

	private async Task DeleteExercise()
	{
		bool isCorrect = await SportAPI.DeleteExercise(selectedExercise);
		if (!isCorrect)
			throw new Exception($"Sorry, we could not delete {selectedExercise.Name}.");

		await RefreshSportComps();
	}
}
