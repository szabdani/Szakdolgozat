@inherits SportCompBase

@using Bases
@using Models.Sports
@using MauiBlazorWeb.Shared.Components.Dialogs
@using MauiBlazorWeb.Shared.Components.Widgets.Sport.Dialogs
@using MauiBlazorWeb.Shared.Components.Icons

@if (routines.Count == 0)
{
	<div class="row">
		<div class="col text-center">
			You have no routines yet!
		</div>
	</div>
}
else
{
	<div class="row">
		<table class="table table-striped text-center">
			<thead class="thead-light">
				<tr>
					<th colspan="5">Routines</th>
				</tr>
				<tr>
					<th>Name</th>
					<th>Description</th>
					<th colspan="3">Actions</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var r in routines)
				{
					<tr>
						<th>
							@exampleWorkoutsOfRoutines[r.Id].Name
						</th>
						<td>
							@exampleWorkoutsOfRoutines[r.Id].Notes
						</td>
						<td>
							<button class="btn btn-primary" @onclick="() => StartRoutine(r.Id)">
								Start
							</button>
						</td>
						<td>
							<button class="btn btn-warning" @onclick="() => EditRoutine(r.Id)">
								<IconEdit />
							</button>
						</td>
						<td>
							<button class="btn btn-danger" @onclick="() => OpenDelete(r)">
								<IconDelete />
							</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

<div class="row">
	<div class="col">
		<button class="btn btn-primary" @onclick="()=> newRoutineDialog.Show()">
			<IconAdd /> Create a new routine!
		</button>
	</div>
</div>

<NewRoutineDialog AccountDoesId="AccountDoesId" @ref=newRoutineDialog />

<WarningDialog Title="Deleting a Routine" OnAcceptAction="() => OnDeleteRoutine(deleteRoutine)" @ref="warningDelete">
	Do you want to delete @name routine?<br />
	This action can not be undone!
</WarningDialog>

@code {
	[Parameter, EditorRequired]
	public int AccountDoesId { get; set; }

	private List<Routine> routines;
	private Dictionary<int, Workout> exampleWorkoutsOfRoutines;
	private Routine deleteRoutine;

	private NewRoutineDialog newRoutineDialog;
	private WarningDialog warningDelete;
	private int delId;
	private string name = "";

	public RoutineTable()
	{
		routines = new List<Routine>();
		exampleWorkoutsOfRoutines = new Dictionary<int, Workout>();
		deleteRoutine = new Routine();

		newRoutineDialog = new NewRoutineDialog();
		warningDelete = new WarningDialog();
	}

	protected override async Task UpdateTables()
	{
		await base.UpdateTables();

		routines = await _sportManager.GetRoutines(AccountDoesId);
		foreach (var r in routines)
		{
			exampleWorkoutsOfRoutines[r.Id] = await GetRoutineExample(AccountDoesId, r.Id);
		}
	}

	private async Task StartRoutine(int routineId)
	{
		await OnStartWorkout(AccountDoesId, routineId);
	}

	private async Task EditRoutine(int routineId)
	{
		Workout exampleWorkout = await GetRoutineExample(AccountDoesId, routineId);
		navigation.NavigateTo($"workout/id={exampleWorkout.Id}", true);
	}

	private void OpenDelete(Routine routine)
	{
		deleteRoutine = routine;
		name = exampleWorkoutsOfRoutines[routine.Id].Name;
		warningDelete.Show();
	}
}
