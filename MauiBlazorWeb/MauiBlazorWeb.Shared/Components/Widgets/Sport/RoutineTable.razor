@inherits SportCompBase

@using Bases
@using Models.Sports
@using MauiBlazorWeb.Shared.Components.Dialogs
@using MauiBlazorWeb.Shared.Components.Icons

@if (routines.Count == 0)
{
	<div class="row">
		<div class="col text-center">
			You have no routines yet!
		</div>
	</div>
}
else
{
	<div class="row">
		<table class="table table-striped text-center">
			<thead class="thead-light">
				<tr>
					<th colspan="5">Routines</th>
				</tr>
				<tr>
					<th>Name</th>
					<th>Description</th>
					<th colspan="3">Actions</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var r in routines)
				{
					<tr>
						<th>
							@exampleWorkoutsOfRoutines[r.Id].Name
						</th>
						<td>
							@(exampleWorkoutsOfRoutines[r.Id].Notes ?? "-")
						</td>
						<td>
							<button class="btn btn-primary" @onclick="() => StartRoutine(r.Id)">
								Start
							</button>
						</td>
						<td>
							<button class="btn btn-warning" @onclick="() => OnEditRoutine(r.Id)">
								<IconEdit />
							</button>
						</td>
						<td>
							<button class="btn btn-danger" @onclick="() => OpenDelete(r)">
								<IconDelete />
							</button>
						</td>
					</tr>
					<tr>
						<td colspan="5">
							<WorkoutExercisesBox Workout="exampleWorkoutsOfRoutines[r.Id]" />
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

<WarningDialog Title="Deleting a Routine" OnAcceptAction="() => OnDeleteRoutine(deleteRoutine)" @ref="warningDelete">
	Do you want to delete @name routine?<br />
	This action can not be undone!
</WarningDialog>

@code {
	[Parameter]
	public required int AccountDoesId { get; set; }

	private List<Routine> routines = new();
	private Dictionary<int, Workout> exampleWorkoutsOfRoutines = new();
	private Routine deleteRoutine = new();
	private WarningDialog warningDelete = new();
	private string name = "";

	private readonly SemaphoreSlim semaphore = new SemaphoreSlim(1, 1);

	protected override async Task UpdateTables()
	{
		await base.UpdateTables();

		await semaphore.WaitAsync();
		var newRoutines = await SportAPI.GetRoutines(AccountDoesId);

		if (newRoutines.Count > routines.Count)
		{
			var ids = newRoutines.Select(s => s.Id).Except(routines.Select(a => a.Id)).ToList();
			List<Routine> addRoutines = newRoutines.Where(s => ids.Contains(s.Id)).ToList();

			foreach (var r in addRoutines)
			{
				routines.Add(r);
				exampleWorkoutsOfRoutines[r.Id] = (await SportAPI.GetRoutineExample(AccountDoesId, r.Id)).First();
			}
		}
		else if (newRoutines.Count < routines.Count)
		{
			var ids = routines.Select(s => s.Id).Except(newRoutines.Select(a => a.Id)).ToList();
			List<Routine> deleteRoutines = routines.Where(s => ids.Contains(s.Id)).ToList();

			foreach (var r in deleteRoutines)
			{
				routines.Remove(r);
				exampleWorkoutsOfRoutines.Remove(r.Id);
			}
		}

		semaphore.Release();
	}

	private async Task StartRoutine(int routineId)
	{
		await OnStartWorkout(AccountDoesId, routineId);
	}

	private void OnEditRoutine(int routineId)
	{
		Navigation.NavigateTo($"workout/id={exampleWorkoutsOfRoutines[routineId].Id}", true);
	}

	private void OpenDelete(Routine routine)
	{
		deleteRoutine = routine;
		name = exampleWorkoutsOfRoutines[routine.Id].Name ?? "No name";
		warningDelete.Show();
	}
}
