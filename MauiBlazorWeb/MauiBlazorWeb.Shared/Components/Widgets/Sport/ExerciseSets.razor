@inherits SportCompBase

@using Bases
@using MauiBlazorWeb.Shared.Components.Dialogs
@using Models.Sports
@using MauiBlazorWeb.Shared.Components.Icons
@using BlazorBootstrap

<div class="row">
	<table class="table table-striped text-center">
		<thead class="thead-light">
			<tr>
				<th>Set</th>
				@switch (Exercise.Type)
				{
					case ExerciseType.Bodyweight:
						<th>Reps</th>
						<th>RPE</th>
						break;
					case ExerciseType.Machine:
						<th>KG</th>
						<th>Reps</th>
						<th>RPE</th>
						break;
					case ExerciseType.Timed:
						<th>Hours</th>
						<th>Minutes</th>
						<th>Seconds</th>
						break;
					case ExerciseType.Distanced:
						<th>KM</th>
						<th>Hours</th>
						<th>Minutes</th>
						<th>Seconds</th>
						break;
					default:
						break;
				}
				<th>Done</th>
				<th>Del</th>
			</tr>
		</thead>
		<tbody>
			@{int i = 1;}
			@foreach (var set in sets)
			{
				<tr class="@(set.IsDone ? "done" : "undone")">
					<th class="tracker-post" @onclick="() => CycleSetType(set)">
						@switch (set.Type)
						{
							case SetsType.Normal:
								@(i++);
								break;
							case SetsType.Warmup:
								<div class="text-danger">
									W
								</div>
								break;
							case SetsType.Drop:
								<div class="text-info">
									D
								</div>
								break;
						}
					</th>

					@switch (Exercise.Type)
					{
						case ExerciseType.Bodyweight:
							<td>
								<NumberInput TValue="int?" @bind-Value=set.Reps @bind-Value:after="()=> UpdateSet(set)" EnableMinMax="true" Min="0" Style="background-color: inherit" Disabled="@(Disabled || @set.IsDone)" />
							</td>
							<td>
								<NumberInput TValue="int?" @bind-Value=set.RPE @bind-Value:after="()=> UpdateSet(set)" EnableMinMax="true" Min="0" Max="10" Style="background-color: inherit" Disabled="@(Disabled || @set.IsDone)" />
							</td>
							break;
						case ExerciseType.Machine:
							<td>
								<NumberInput TValue="double?" @bind-Value=set.Weight @bind-Value:after="()=> UpdateSet(set)" EnableMinMax="true" Min="0" Style="background-color: inherit" Disabled="@(Disabled || @set.IsDone)" />
							</td>
							<td>
								<NumberInput TValue="int?" @bind-Value=set.Reps @bind-Value:after="()=> UpdateSet(set)" EnableMinMax="true" Min="0" Style="background-color: inherit" Disabled="@(Disabled || @set.IsDone)" />
							</td>
							<td>
								<NumberInput TValue="int?" @bind-Value=set.RPE @bind-Value:after="()=> UpdateSet(set)" EnableMinMax="true" Min="0" Max="10" Style="background-color: inherit" Disabled="@(Disabled || @set.IsDone)" />
							</td>
							break;
						case ExerciseType.Timed:
							<td>
								<NumberInput TValue="int" @bind-Value=set.LengthHours @bind-Value:after="()=> UpdateSet(set)" EnableMinMax="true" Min="0" Max="99" Style="background-color: inherit" Disabled="@(Disabled || @set.IsDone)" />
							</td>
							<td>
								<NumberInput TValue="int" @bind-Value=set.LengthMinutes @bind-Value:after="()=> UpdateSet(set)" EnableMinMax="true" Min="0" Max="59" Style="background-color: inherit" Disabled="@(Disabled || @set.IsDone)" />
							</td>
							<td>
								<NumberInput TValue="int" @bind-Value=set.LengthSeconds @bind-Value:after="()=> UpdateSet(set)" EnableMinMax="true" Min="0" Max="59" Style="background-color: inherit" Disabled="@(Disabled || @set.IsDone)" />
							</td>
							break;
						case ExerciseType.Distanced:
							<td>
								<NumberInput TValue="double?" @bind-Value=set.Distance @bind-Value:after="()=> UpdateSet(set)" EnableMinMax="true" Min="0" Style="background-color: inherit" Disabled="@(Disabled || @set.IsDone)" />
							</td>
							<td>
								<NumberInput TValue="int" @bind-Value=set.LengthHours @bind-Value:after="()=> UpdateSet(set)" EnableMinMax="true" Min="0" Max="99" Style="background-color: inherit" Disabled="@(Disabled || @set.IsDone)" />
							</td>
							<td>
								<NumberInput TValue="int" @bind-Value=set.LengthMinutes @bind-Value:after="()=> UpdateSet(set)" EnableMinMax="true" Min="0" Max="59" Style="background-color: inherit" Disabled="@(Disabled || @set.IsDone)" />
							</td>
							<td>
								<NumberInput TValue="int" @bind-Value=set.LengthSeconds @bind-Value:after="()=> UpdateSet(set)" EnableMinMax="true" Min="0" Max="59" Style="background-color: inherit" Disabled="@(Disabled || @set.IsDone)" />
							</td>
							break;
						default:
							break;
					}

					<td class="@(set.IsDone ? "done" : "tracker-post")" @onclick="() => ToggleSetDone(set)">
						@if (set.IsDone)
						{
							<IconDone />
						}
						else
						{
							<IconDash />
						}
					</td>
					<td class="delete" @onclick="() => DeleteSet(set)">
						<IconDelete />
					</td>
				</tr>
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="@addColspan">
					<button class="btn btn-info" disabled="@Disabled" @onclick="AddSet">
						Add a new Set! <IconAdd />
					</button>
				</td>
			</tr>
		</tfoot>
	</table>
</div>

<WarningDialog Title="Unfinished Set" @ref="warning">
	<p>Your set is not finished!</p>
	@switch (Exercise.Type)
	{
		case ExerciseType.Bodyweight:
			<p>You must set a correct value for the number of Reps!</p>
			break;
		case ExerciseType.Machine:
			<p>You must set correct values for the number of Reps and the Weight!</p>
			break;
		case ExerciseType.Timed:
			<p>You must set a correct value for the time!</p>
			break;
		case ExerciseType.Distanced:
			<p>You must set a correct value for the distance and the time!</p>
			break;
		default:
			break;
	}
</WarningDialog>

@code {
	[Parameter] public required int WorkoutId { get; set; }
	[Parameter] public required Exercise Exercise { get; set; }
	[Parameter] public required bool Disabled { get; set; }

	private Workout workout = new();

	private List<Sets> sets = new();
	private int addColspan = 1;

	private WarningDialog warning = new();


	protected override async Task ValidateParameters()
	{
		workout = await ValidateWorkout(WorkoutId);

		@switch (Exercise.Type)
		{
			case ExerciseType.Bodyweight:
				addColspan = 5;
				break;
			case ExerciseType.Machine:
				addColspan = 6;
				break;
			case ExerciseType.Timed:
				addColspan = 4;
				break;
			case ExerciseType.Distanced:
				addColspan = 5;
				break;
			case ExerciseType.Other:
				addColspan = 3;
				break;
		}

		await base.ValidateParameters();
	}

	protected override async Task UpdateTables()
	{
		await base.UpdateTables();

		sets = await SportAPI.GetSetsByBoth(Exercise.Id, WorkoutId);
	}

	private async Task CycleSetType(Sets set)
	{
		if (Disabled)
			return;

		if (set.Type == SetsType.Drop)
			set.Type = SetsType.Normal;
		else
			set.Type++;

		await UpdateSet(set);
	}

	private async Task ToggleSetDone(Sets set)
	{
		if (Disabled)
			return;

		bool isCorrect = true;
		switch (Exercise.Type)
		{
			case ExerciseType.Bodyweight:
				if (set.Reps is null)
				{
					isCorrect = false;
					warning.Show();
				}
				break;
			case ExerciseType.Machine:
				if (set.Reps is null || set.Weight is null)
				{
					isCorrect = false;
					warning.Show();
				}
				break;
			case ExerciseType.Timed:
				if (set.LengthHours == 0 && set.LengthMinutes == 0 && set.LengthSeconds == 0)
				{
					isCorrect = false;
					warning.Show();
				}
				break;
			case ExerciseType.Distanced:
				if (set.Distance is null || (set.LengthHours == 0 && set.LengthMinutes == 0 && set.LengthSeconds == 0))
				{
					isCorrect = false;
					warning.Show();
				}
				break;
			default:
				break;
		}

		if(isCorrect)
		{
			set.IsDone = !set.IsDone;
			await UpdateSet(set);
		}
	}

	private async Task UpdateSet(Sets set)
	{
		bool isCorrect = await SportAPI.UpdateSet(set);
		if (!isCorrect)
			throw new Exception($"Sorry, we could not update your Set");

		await RefreshSportComps();
	}

	private async Task DeleteSet(Sets set, bool deleteAll = false)
	{
		if (Disabled)
			return;

		bool isCorrect = await SportAPI.DeleteSet(set);
		if (!isCorrect)
			throw new Exception($"Sorry, we could not delete your Set");

		if(!deleteAll)
			await RefreshSportComps();
	}

	private async Task AddSet()
	{
		Sets newSet = new Sets { Exercise_Id = Exercise.Id, Workout_Id = WorkoutId };

		bool isCorrect = await SportAPI.InsertSet(newSet);
		if (!isCorrect)
			throw new Exception($"Sorry, we could not insert your Set");

		await RefreshSportComps();
	}

	public async Task DeleteSets()
	{
		foreach(var set in sets)
		{
			await DeleteSet(set, true);
		}
		await RefreshSportComps();
	}

	public bool ValidateSets()
	{
		bool retVal = true;
		foreach(var set in sets)
		{
			if (!set.IsDone)
			{
				retVal = false;
				break;
			}
		}
		return retVal;
	}
}

<style>
	.tracker-post {
		vertical-align: middle;
		cursor: pointer;
		transition: background-color 0.3s;
	}

		.tracker-post:hover {
			background-color: powderblue;
		}

	.undone {
		vertical-align: middle;
		transition: background-color 0.3s;
	}

	.done {
		vertical-align: middle;
		transition: background-color 0.3s;
		background-color: lightgreen;
	}

	.delete {
		vertical-align: middle;
		cursor: pointer;
		transition: background-color 0.3s;
		background-color: red;
	}

		.delete:hover {
			background-color: lightcoral;
		}
</style>
