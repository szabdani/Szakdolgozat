@inherits SportCompBase

@using Bases
@using MauiBlazorWeb.Shared.Components.Icons
@using Models.Sports
@using BlazorBootstrap

<div class="row">
	<div class="col mr-1">
		<h4>Exercise progression</h4>
	</div>
	<div class="col">
		<InputSelect class="form-control" @bind-Value="timeSpan" @bind-Value:after="@RefreshSportComps">
			@foreach (var t in Enum.GetValues(typeof(TimeFilter.TimePeriod)))
			{
				<option value="@t">@t</option>
			}
		</InputSelect>
	</div>
	<div class="col">
		<div class="row">
			<div class="col">
				<button class="btn btn-info" @onclick="() => MoveViewIndex(false)" disabled="@isPrevDisabled">
					<IconLeft />
				</button>
			</div>
			<div class="col">
				<h5>Toggle charts</h5>
			</div>
			<div class="col">
				<button class="btn btn-info" @onclick="() => MoveViewIndex(false)" disabled="@isNextDisabled">
					<IconRight />
				</button>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col">
			<BarChart @ref="barChart" />
		</div>
	</div>
</div>

@code {
	[Parameter]
	public required List<Sets> Sets { get; set; }
	[Parameter]
	public required List<Workout> Workouts { get; set; }
	[Parameter]
	public required int ExerciseId { get; set; } = 0;
	[Parameter]
	public int AccountDoesId { get; set; }

	private Exercise exercise = new();
	private List<Workout> filteredWorkouts = [];

	private bool isChartInit = false;
	private TimeFilter.TimePeriod timeSpan = new();

	private BarChart barChart = new();
	private ChartData chartData = new();
	private BarChartOptions barChartOptions;

	private int viewIndex = 0;
	private int viewMaxIndex = 0;
	private bool isPrevDisabled => viewIndex == 0;
	private bool isNextDisabled => viewIndex == viewMaxIndex;

	public ExerciseChart()
	{
		barChartOptions = new BarChartOptions();
		barChartOptions.Responsive = true;

		barChartOptions.Scales = new Scales
	{
		X = new ChartAxes { Title = new ChartAxesTitle { Text = "Workouts", Display = true } },
		Y = new ChartAxes { Title = new ChartAxesTitle { Text = "Duration (Minutes)", Display = true } }
	};
		barChartOptions.Plugins.Legend.Title = new ChartPluginsLegendTitle { };
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			await UpdateTables();
			await barChart.InitializeAsync(chartData, barChartOptions);
			isChartInit = true;
		}
	}

	private async Task MoveViewIndex(bool increase)
	{
		viewIndex += increase ? 1 : -1;

		await RefreshSportComps();
	}

	protected override async Task UpdateTables()
	{
		await base.UpdateTables();
		exercise = (await SportManager.GetExercise(ExerciseId)).First();
		switch (exercise.Type)
		{
			case ExerciseType.Bodyweight:
				viewMaxIndex = 1;
				break;
			case ExerciseType.Machine:
				viewMaxIndex = 3;
				break;
			case ExerciseType.Timed:
				viewMaxIndex = 2;
				break;
			case ExerciseType.Distanced:
				viewMaxIndex = 6;
				break;
			default:
				viewMaxIndex = 0;
				break;
		}


		filteredWorkouts = Workouts.Where(w => TimeFilter.FilterByTimePeriod(w.Starttime, DateTime.Today, timeSpan)).ToList();


		GenerateBarChartData();

		if (isChartInit)
			await barChart.UpdateAsync(chartData, barChartOptions);
	}

	private void GenerateBarChartData()
	{
		List<string> labels = new List<string>();
		List<double?> data = new List<double?>();

		foreach (var workout in filteredWorkouts)
		{
			double? value = 0;

			DateTime day = workout.Starttime.Date;

			string dateString;
			switch (timeSpan)
			{
				case TimeFilter.TimePeriod.Year:
					dateString = day.ToString("MMM dd");
					break;
				case TimeFilter.TimePeriod.All:
					dateString = day.ToString("yyyy MMM dd");
					break;
				default:
					dateString = day.ToString("dd");
					break;
			}

			var workoutSets = Sets.Where(s => s.Workout_Id == workout.Id);
			switch (exercise.Type)
			{
				case ExerciseType.Bodyweight:
					barChartOptions.Scales.Y!.Title!.Text = "Repetitions";
					switch(viewIndex)
					{
						case 0:
							value = Sets.Select(s => s.Reps).Max();
							barChartOptions.Plugins.Legend.Title!.Text = "Most reps";
							break;
						case 1:
							value = Sets.Select(s => s.Reps).Sum();
							barChartOptions.Plugins.Legend.Title!.Text = "Total reps";
							break;
					}
					break;
				case ExerciseType.Machine:
					switch(viewIndex)
					{
						case 0:
							value = Sets.Select(s => s.Weight).Max();
							barChartOptions.Plugins.Legend.Title!.Text = "Heaviest weight";
							barChartOptions.Scales.Y!.Title!.Text = "Weight (kg)";
							break;
						case 1:
							value = Sets.Select(s => s.Reps * s.Weight).Max();
							barChartOptions.Plugins.Legend.Title!.Text = "Heaviest set volume";
							barChartOptions.Scales.Y!.Title!.Text = "Weight x reps (kg)";
							break;
						case 2:
							value = Sets.Select(s => s.Reps * s.Weight).Sum();
							barChartOptions.Plugins.Legend.Title!.Text = "Total volume";
							barChartOptions.Scales.Y!.Title!.Text = "Weight x reps (kg)";
							break;
						case 3:
							value = Sets.Select(s => s.Reps).Sum();
							barChartOptions.Plugins.Legend.Title!.Text = "Total reps";
							barChartOptions.Scales.Y!.Title!.Text = "Repetitions";
							break;
					}
					break;
				case ExerciseType.Timed:
					switch (viewIndex)
					{
						case 0:
							value = Sets.Select(s => new TimeSpan(s.LengthHours,s.LengthMinutes, s.LengthSeconds).TotalSeconds).Max();
							barChartOptions.Plugins.Legend.Title!.Text = "Longest set time";
							break;
						case 1:
							value = Sets.Select(s => s.Reps).Min();
							barChartOptions.Plugins.Legend.Title!.Text = "Shortest set time";
							break;
						case 2:
							value = Sets.Select(s => s.Reps).Sum();
							barChartOptions.Plugins.Legend.Title!.Text = "Total time";
							break;
					}
					break;
				case ExerciseType.Distanced:
					switch (viewIndex)
					{
						case 0:
							value = Sets.Select(s => s.Weight).Max();
							barChartOptions.Plugins.Legend.Title!.Text = "Fastest set pace";
							break;
						case 1:
							value = Sets.Select(s => s.Reps).Sum();
							barChartOptions.Plugins.Legend.Title!.Text = "Fastest pace";
							break;
						case 2:
							value = Sets.Select(s => s.Distance).Max();
							barChartOptions.Plugins.Legend.Title!.Text = "Longest set distance";
							break;
						case 3:
							value = Sets.Select(s => s.Distance).Sum();
							barChartOptions.Plugins.Legend.Title!.Text = "Total distance";
							break;
						case 4:
							value = Sets.Select(s => s.Reps).Max();
							barChartOptions.Plugins.Legend.Title!.Text = "Longest set time";
							break;
						case 5:
							value = Sets.Select(s => s.Reps).Min();
							barChartOptions.Plugins.Legend.Title!.Text = "Shortest set time";
							break;
						case 6:
							value = Sets.Select(s => s.Reps).Sum();
							barChartOptions.Plugins.Legend.Title!.Text = "Total time";
							break;
					}
					break;
				default:
					value = Sets.Count();
					barChartOptions.Plugins.Legend.Title!.Text = "Number of sets";
					break;
			}

			labels.Add(dateString);
			data.Add(value);
		}


		var datasets = new List<IChartDataset>();
		var dataset1 = new BarChartDataset() { Data = data };

		datasets.Add(dataset1);

		chartData = new ChartData{ Labels = labels, Datasets = datasets };

		double? total = data.Max();
		barChartOptions.Scales.Y!.Max = total;
	}
}
