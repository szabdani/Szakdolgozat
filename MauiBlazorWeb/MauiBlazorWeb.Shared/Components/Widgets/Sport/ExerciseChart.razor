@inherits SportCompBase

@using Bases
@using MauiBlazorWeb.Shared.Components.Icons
@using Models.Sports
@using BlazorBootstrap

<div class="row">
	<div class="col-auto">
		<h4>Exercise progression</h4>
	</div>
	<div class="col-auto">
		<button class="btn btn-info" @onclick="() => MoveViewIndex(false)" disabled="@isPrevDisabled">
			<IconLeft />
		</button>
	</div>
	<div class="col-auto">
		<h5>Switch charts</h5>
	</div>
	<div class="col-auto">
		<button class="btn btn-info" @onclick="() => MoveViewIndex(true)" disabled="@isNextDisabled">
			<IconRight />
		</button>
	</div>
	<div class="col-auto float-end">
		<InputSelect class="form-control" @bind-Value="timeSpan" @bind-Value:after="UpdateObserver">
			@foreach (var t in Enum.GetValues(typeof(TimeFilter.TimePeriod)))
			{
				<option value="@t">@t</option>
			}
		</InputSelect>
	</div>
	<div class="row">
		<div class="col text-center">
			<h3>@title</h3>
		</div>
	</div>
	<div class="row">
		<div class="col">
			<LineChart @ref="lineChart" />
		</div>
	</div>
</div>

@code {
	[Parameter]
	public required List<Sets> Sets { get; set; }
	[Parameter]
	public required List<Workout> Workouts { get; set; }
	[Parameter]
	public required Exercise Exercise { get; set; }
	[Parameter]
	public int AccountDoesId { get; set; }

	private string title = "";
	private List<Workout> filteredWorkouts = [];

	private bool isChartInit = false;
	private TimeFilter.TimePeriod timeSpan = new();

	private LineChart lineChart = new();
	private ChartData chartData = new();
	private LineChartOptions lineChartOptions = new LineChartOptions { Responsive = true };

	private int viewIndex = 0;
	private int viewMaxIndex = 0;
	private bool isPrevDisabled => viewIndex == 0;
	private bool isNextDisabled => viewIndex == viewMaxIndex;

	public ExerciseChart()
	{
		lineChartOptions = new LineChartOptions();
		lineChartOptions.Responsive = true;

		lineChartOptions.Scales = new Scales
	{
		X = new ChartAxes { Title = new ChartAxesTitle { Text = "Workouts", Display = true } },
		Y = new ChartAxes { Title = new ChartAxesTitle { Text = "Duration (Minutes)", Display = true } }
	};
		lineChartOptions.Plugins.Legend.Display = false;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			await UpdateTables();
			await lineChart.InitializeAsync(chartData, lineChartOptions);
			isChartInit = true;
		}
	}

	private async Task MoveViewIndex(bool increase)
	{
		viewIndex += increase ? 1 : -1;
		await UpdateObserver();
	}

	protected override async Task ValidateParameters()
	{
		switch (Exercise.Type)
		{
			case ExerciseType.Bodyweight:
				viewMaxIndex = 1;
				break;
			case ExerciseType.Machine:
				viewMaxIndex = 3;
				break;
			case ExerciseType.Timed:
				viewMaxIndex = 2;
				break;
			case ExerciseType.Distanced:
				viewMaxIndex = 6;
				break;
			default:
				viewMaxIndex = 0;
				break;
		}
		await base.ValidateParameters();
	}

	protected override async Task UpdateTables()
	{
		await base.UpdateTables();

		filteredWorkouts = Workouts.Where(w => TimeFilter.FilterByTimePeriod(w.Starttime, DateTime.Today, timeSpan)).ToList();
		GenerateBarChartData();

		if (isChartInit)
			await lineChart.UpdateAsync(chartData, lineChartOptions);
	}

	private void GenerateBarChartData()
	{
		List<string> labels = new List<string>();
		List<double?> data = new List<double?>();
		string datasetLabel = "";

		Dictionary<string, int> timeDivider = [];
		Dictionary<string, string> timeDatasetLabel = [];
		Dictionary<string, string> timeText = [];

		if (Exercise.Type == ExerciseType.Timed || Exercise.Type == ExerciseType.Distanced)
		{
			double min = Sets.Select(s => new TimeSpan(s.LengthHours, s.LengthMinutes, s.LengthSeconds).TotalSeconds).Min();
			double max = Sets.Select(s => new TimeSpan(s.LengthHours, s.LengthMinutes, s.LengthSeconds).TotalSeconds).Max();

			if (min > 600)
			{
				timeDivider["min"] = 60;
				timeText["min"] = "Duration (minutes)";
				timeDatasetLabel["min"] = "Minutes";
			}
			else
			{
				timeDivider["min"] = 1;
				timeText["min"] = "Duration (seconds)";
				timeDatasetLabel["min"] = "Seconds";
			}

			if (max > 600)
			{
				timeDivider["max"] = 60;
				timeText["max"] = "Duration (minutes)";
				timeDatasetLabel["max"] = "Minutes";
			}
			else
			{
				timeDivider["max"] = 1;
				timeText["max"] = "Duration (seconds)";
				timeDatasetLabel["max"] = "Seconds";
			}
		}

		foreach (var workout in filteredWorkouts)
		{
			double? value = 0;


			DateTime day = workout.Starttime.Date;

			string dateString;
			switch (timeSpan)
			{
				case TimeFilter.TimePeriod.Year:
					dateString = day.ToString("MMM dd");
					break;
				case TimeFilter.TimePeriod.All:
					dateString = day.ToString("yyyy MMM dd");
					break;
				default:
					dateString = day.ToString("dd");
					break;
			}

			var workoutSets = Sets.Where(s => s.Workout_Id == workout.Id);
			switch (Exercise.Type)
			{
				case ExerciseType.Bodyweight:
					lineChartOptions.Scales.Y!.Title!.Text = "# of Reps";
					datasetLabel = "Reps";
					switch(viewIndex)
					{
						case 0:
							value = workoutSets.Select(s => s.Reps).Max();
							title = "Most reps";
							break;
						case 1:
							value = workoutSets.Select(s => s.Reps).Sum();
							title = "Total reps";
							break;
					}
					break;
				case ExerciseType.Machine:
					switch(viewIndex)
					{
						case 0:
							value = workoutSets.Select(s => s.Weight).Max();
							title = "Heaviest weight";
							lineChartOptions.Scales.Y!.Title!.Text = "Weight (kg)";
							datasetLabel = "Kg";
							break;
						case 1:
							value = workoutSets.Select(s => s.Reps * s.Weight).Max();
							title = "Heaviest set volume";
							lineChartOptions.Scales.Y!.Title!.Text = "Weight x reps (kg)";
							datasetLabel = "Kg x Reps";
							break;
						case 2:
							value = workoutSets.Select(s => s.Reps * s.Weight).Sum();
							title = "Total volume";
							lineChartOptions.Scales.Y!.Title!.Text = "Weight x reps (kg)";
							datasetLabel = "Kg x Reps";
							break;
						case 3:
							value = workoutSets.Select(s => s.Reps).Sum();
							title = "Total reps";
							lineChartOptions.Scales.Y!.Title!.Text = "# of Reps";
							datasetLabel = "Reps";
							break;
					}
					break;
				case ExerciseType.Timed:
					switch (viewIndex)
					{
						case 0:
							value = workoutSets.Select(s => new TimeSpan(s.LengthHours, s.LengthMinutes, s.LengthSeconds).TotalSeconds).Max() / timeDivider["max"];
							lineChartOptions.Scales.Y!.Title!.Text = timeText["max"];
							datasetLabel = timeDatasetLabel["max"];
							title = "Longest set time";
							break;
						case 1:
							value = workoutSets.Select(s => new TimeSpan(s.LengthHours, s.LengthMinutes, s.LengthSeconds).TotalSeconds).Min() / timeDivider["min"];
							lineChartOptions.Scales.Y!.Title!.Text = timeText["min"];
							datasetLabel = timeDatasetLabel["min"];
							title = "Shortest set time";
							break;
						case 2:
							value = workoutSets.Select(s => new TimeSpan(s.LengthHours, s.LengthMinutes, s.LengthSeconds).TotalMinutes).Sum();
							lineChartOptions.Scales.Y!.Title!.Text = "Duration (minutes)";
							datasetLabel = "Minutes";
							title = "Total time";
							break;
					}
					break;
				case ExerciseType.Distanced:
					switch (viewIndex)
					{
						case 0:
							value = workoutSets.Select(s => s.Distance / new TimeSpan(s.LengthHours, s.LengthMinutes, s.LengthSeconds).TotalHours).Max();
							title = "Fastest set pace";
							lineChartOptions.Scales.Y!.Title!.Text = "Pace (km/h)";
							datasetLabel = "Km/h";
							break;
						case 1:
							value = workoutSets.Select(s => s.Distance / new TimeSpan(s.LengthHours, s.LengthMinutes, s.LengthSeconds).TotalHours).Sum();
							title = "Fastest pace";
							lineChartOptions.Scales.Y!.Title!.Text = "Pace (km/h)";
							datasetLabel = "Km/h";
							break;
						case 2:
							value = workoutSets.Select(s => s.Distance).Max();
							title = "Longest set distance";
							lineChartOptions.Scales.Y!.Title!.Text = "Distance (km)";
							datasetLabel = "Km";
							break;
						case 3:
							value = workoutSets.Select(s => s.Distance).Sum();
							title = "Total distance";
							lineChartOptions.Scales.Y!.Title!.Text = "Distance (km)";
							datasetLabel = "Km";
							break;
						case 4:
							value = workoutSets.Select(s => new TimeSpan(s.LengthHours, s.LengthMinutes, s.LengthSeconds).TotalSeconds).Max() / timeDivider["max"];
							lineChartOptions.Scales.Y!.Title!.Text = timeText["max"];
							datasetLabel = timeDatasetLabel["max"];
							title = "Longest set time";
							break;
						case 5:
							value = workoutSets.Select(s => new TimeSpan(s.LengthHours, s.LengthMinutes, s.LengthSeconds).TotalSeconds).Min() / timeDivider["min"];
							lineChartOptions.Scales.Y!.Title!.Text = timeText["min"];
							datasetLabel = timeDatasetLabel["min"];
							title = "Shortest set time";
							break;
						case 6:
							value = workoutSets.Select(s => new TimeSpan(s.LengthHours, s.LengthMinutes, s.LengthSeconds).TotalMinutes).Sum();
							lineChartOptions.Scales.Y!.Title!.Text = "Duration (minutes)";
							datasetLabel = "Minutes";
							title = "Total time";
							break;
					}
					break;
				default:
					value = workoutSets.Count();
					lineChartOptions.Scales.Y!.Title!.Text = "# of Sets";
					datasetLabel = "Sets";
					title = "Number of sets";
					break;
			}

			labels.Add(dateString);
			data.Add(value);
		}

		var datasets = new List<IChartDataset>();

		var c = ColorUtility.CategoricalTwelveColors[0].ToColor();
		var dataset = new LineChartDataset
			{
				Label = datasetLabel,
				BackgroundColor = c.ToRgbString(),
				BorderColor = c.ToRgbString(),
				BorderWidth = 2,
				HoverBorderWidth = 4,
				Data = data
			};


		datasets.Add(dataset);

		chartData = new ChartData{ Labels = labels, Datasets = datasets };

		double? total = data.Max();
		lineChartOptions.Scales.Y!.Max = total;
	}
}
