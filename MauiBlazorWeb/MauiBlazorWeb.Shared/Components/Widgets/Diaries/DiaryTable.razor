@inherits DiaryCompBase

@using Bases
@using MauiBlazorWeb.Shared.Components.Icons
@using Models.Diaries

@inject IJSRuntime JS

<div class="row">
	<div class="col">
		<div class="table-responsive" style="max-height: 400px;">
			<table class="table text-center">
				<thead class="thead-light" style="position: sticky; top: 0; background-color: #ffefef">
					<tr>
						<th>Date</th>
						@foreach (var col in allCols.OrderBy(col => col.Type))
						{
							<th>
								@col.Name
								<button class="btn btn-warning" @onclick="() => editHabitDialog.Show(col)">
									<IconEdit />
								</button>
								<button class="btn btn-danger" @onclick="() => OnDeleteCol(col)">
									<IconDelete />
								</button>
							</th>
						}
					</tr>
				</thead>
				<tbody>
					@foreach (var date in allDatesSinceReg)
					{
						<tr id="@(date == DateTime.Today ? "last-row" : null)" class="@(date.Month % 2 == 1 ? "lightrow" : "darkrow")">
							<th>
								@date.ToString("yyyy-MM-dd")
							</th>
							@foreach (var col in allCols.OrderBy(col => col.Type))
							{
								var post = allPosts.FirstOrDefault(p => p.Diary_log_column_Id == col.Id && p.Date == date);
								@switch (col.Type)
								{
									case DiaryColumnType.Habit:
										<td class="tracker-post" @onclick="() => OnToggleHabitValue(col.Id, date)">
											@(post?.Value ?? "")
										</td>
										break;
									default:
										<td class="tracker-post" @onclick="() => editPostDialog.Show(col.Id, date)">
											@(post?.Value ?? "")
										</td>
										break;
								}
							}
						</tr>
					}
				</tbody>
				<tfoot style="position: sticky; bottom: 0; background-color: #ffefef">
					<tr>
						@if (IsHabit)
						{
							<th>
								Sum
							</th>
							@foreach (var col in allCols.OrderBy(col => col.Type))
							{
								<th>
									@allPosts.Where(p => p.Diary_log_column_Id == col.Id && p.Value == "X").Count()
								</th>
							}
						}
						else
						{
							<th>
								Average
							</th>
							@foreach (var col in allCols.OrderBy(col => col.Type))
							{
								if (col.Type == DiaryColumnType.NumberRange && allPosts.Where(p => p.Diary_log_column_Id == col.Id).Count() != 0)
								{
									<th>
										@allPosts.Where(p => p.Diary_log_column_Id == col.Id).Average(p => Convert.ToInt32(p.Value)).ToString("0.##")
									</th>
								}

								else
								{
									<th>
										-
									</th>
								}

							}
						}
					</tr>
				</tfoot>
			</table>
		</div>
	</div>
</div>


<EditDiaryColDialog IsHabit="IsHabit" @ref=editHabitDialog />
<EditDiaryPostDialog IsHabit="IsHabit" @ref=editPostDialog />

@code {
	private EditDiaryColDialog editHabitDialog = new();
	private EditDiaryPostDialog editPostDialog = new();

	public DiaryTable() { IsHabit = false; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			await JS.InvokeVoidAsync("scrollToToday", IsHabit);
		}
	}

	private async Task OnDeleteCol(Diary_log_column col)
	{
		await AppState.ShowLoadingScreenWhileAwaiting(() => DeleteCol(col));
	}

	private async Task DeleteCol(Diary_log_column col)
	{
		bool isCorrect = await DiaryAPI.DeleteDiaryCol(col);
		if (!isCorrect)
			throw new Exception($"Sorry, we could not delete {col.Name}");
		await RefreshDiaryComps();
	}
}

<style>
	.lightrow {
		background-color: #ffefef;
	}

	.darkrow {
		background-color: #f2e3e3;
	}

	.tracker-post {
		vertical-align: middle;
		background-color: ghostwhite;
		cursor: pointer;
		transition: background-color 0.3s;
	}

		.tracker-post:hover {
			background-color: powderblue;
		}
</style>

<script>
	function scrollToToday(IsHabit) 
	{
		const lastRow = document.getElementById("last-row");
		if (lastRow) 
		{
			if(IsHabit) 
			{
				lastRow.scrollIntoView({ behavior: 'smooth', block: 'center' });
			}
			
			else
			{
				const container = lastRow.closest('.table-responsive');
				if (container) 
				{
					container.scrollTop = lastRow.offsetTop;
				}
			}
		}
	}
</script>
