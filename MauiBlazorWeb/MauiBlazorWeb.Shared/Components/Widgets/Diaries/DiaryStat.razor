@inherits DiaryCompBase

@using Bases
@using BlazorBootstrap
@using Models.Diaries
@using MauiBlazorWeb.Shared.Components.Widgets.Diaries

<div class="row">
	<div class="col">
		<LineChart @ref="lineChart"/>
	</div>
	<div class="col">
		<div class="row">
			<div class="col">
				<label>Select Time Span:</label>
				<InputSelect class="form-control" @bind-Value="timeSpan" @bind-Value:after="@UpdateObserver">
					@foreach (var t in Enum.GetValues(typeof(TimeFilter.TimePeriod)))
					{
						<option value="@t">@t</option>
					}
				</InputSelect>
			</div>
		</div>
		<div class="row">
			<div class="col">
				<div class="table-responsive">
					<table class="table float-end">
						<thead>
							<tr>
								<th>Habits</th>
								@foreach (var col in numCols)
								{
									<th>@col.Name</th>
								}
							</tr>
						</thead>
						<tbody>
							<tr>
								<th>Average</th>
								@foreach (var col in numCols)
								{
									if (isAverageCorrect[col.Id])
									{
										<th>
											@averages[col.Id].ToString("0.##")
										</th>

									}
									else
									{
										<th>
											-
										</th>
									}
								}
							</tr>
							<tr>
								<th>Show ?</th>
								@foreach (var col in numCols)
								{
									<td class="tracker-post" @onclick="() => OnToggle(col.Id)">
										@(checkBox[col.Id] ? "X" : "")
									</td>
								}
							</tr>
						</tbody>
						<tfoot>
							<tr>
								<td colspan="@(numCols.Count % 2 == 1 ? (numCols.Count + 1)/2 : numCols.Count/2 + 1)">
									<button class="btn btn-info w-100" value="Show" @onclick="CheckAll">Show All</button>
								</td>
								<td colspan="@(numCols.Count % 2 == 1 ? (numCols.Count + 1)/2 : numCols.Count/2)">
									<button class="btn btn-info w-100" value="Show" @onclick="UnCheckAll">Hide All</button>
								</td>
							</tr>
						</tfoot>
					</table>
				</div>
			</div>
		</div>
		<div class="row">
			<div class="col">
				<button class="btn btn-info w-100" @onclick="() => newHabitDialog.Show()">
					Add a new Diary column!
				</button>
			</div>
		</div>
	</div>
</div>
<NewDiaryColDialog IsHabit="false" @ref=newHabitDialog />

@code {
	private NewDiaryColDialog newHabitDialog = new();
	private List<Diary_log_column> numCols = new();

	private TimeFilter.TimePeriod timeSpan = new();
	private Dictionary<int, bool> checkBox = new();
	private Dictionary<int, bool> isAverageCorrect = new();
	private Dictionary<int, double> averages = new();

	private LineChart lineChart = new();
	private LineChartOptions lineChartOptions = new LineChartOptions {Responsive = true };
	private ChartData chartData = new();

	private bool isChartInit = false;

	public DiaryStat() { IsHabit = false; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			await lineChart.InitializeAsync(chartData, lineChartOptions);
			isChartInit = true;
			await UpdateTables();
		}
	}

	private async Task OnToggle(int id)
	{
		checkBox[id] = !checkBox[id];
		await UpdateTables();
	}

	private async Task CheckAll()
	{
		foreach (var key in checkBox.Keys.ToList())
		{
			checkBox[key] = true;
		}
		await UpdateTables();
	}

	private async Task UnCheckAll()
	{
		foreach (var key in checkBox.Keys.ToList())
		{
			checkBox[key] = false;
		}
		await UpdateTables();
	}

	protected override async Task UpdateTables()
	{
		await base.UpdateTables();

		numCols = allDiaryCols.Where(c => c.Type == Models.Diaries.DiaryColumnType.NumberRange).ToList();

		foreach (var col in numCols)
		{
			List<Diary_log_post> posts = allDiaryPosts.Where(p => p.Diary_log_column_Id == col.Id && TimeFilter.FilterByTimePeriod(p.Date, DateTime.Today, timeSpan)).ToList();
			if (posts.Count != 0)
			{
				isAverageCorrect[col.Id] = true;
				double avg = posts.Average(p => Convert.ToInt32(p.Value));
				averages[col.Id] = avg;
			}
			else
			{
				isAverageCorrect[col.Id] = false;
			}
		}

		foreach (var col in numCols)
		{
			if (!checkBox.ContainsKey(col.Id))
			{
				checkBox[col.Id] = true;
			}
		}

		GenerateLineChartData();

		if (isChartInit)
			await lineChart.UpdateAsync(chartData, lineChartOptions);
	}

	private void GenerateLineChartData()
	{
		var datasets = new List<IChartDataset>();
		var dateStrings = new List<string>();

		bool first = true;
		foreach (var dateInTimeSpan in allDatesSinceReg.Where(d => TimeFilter.FilterByTimePeriod(d.Date, DateTime.Today, timeSpan)))
		{
			string dateString;
			if (first)
			{
				dateString = dateInTimeSpan.ToString("yyyy MMM dd");
				first = false;
			}
			else
			{
				switch (timeSpan)
				{
					case TimeFilter.TimePeriod.Year:
						dateString = dateInTimeSpan.ToString("MMM dd");
						break;
					case TimeFilter.TimePeriod.All:
						dateString = dateInTimeSpan.ToString("yyyy MMM dd");
						break;
					default:
						dateString = dateInTimeSpan.ToString("dd");
						break;
				}
			}

			dateStrings.Add(dateString);
		}

		if (numCols.Count == 0)
		{ 
			chartData = new ChartData { Labels = dateStrings, Datasets = datasets };
			return;
		}


		int i = 0;
		foreach (var col in numCols.Where(c => checkBox[c.Id]))
		{
			var c = ColorUtility.CategoricalTwelveColors[i++].ToColor();

			var dataset = new LineChartDataset
				{
					Label = col.Name,
					BackgroundColor = c.ToRgbString(),
					BorderColor = c.ToRgbString(),
					BorderWidth = 2,
					HoverBorderWidth = 4,
					SpanGaps = true
				};

			var data = new List<double?>();
			foreach (var dateInTimeSpan in allDatesSinceReg.Where(d => TimeFilter.FilterByTimePeriod(d.Date, DateTime.Today, timeSpan)))
			{
				double? num = null;
				var post = allDiaryPosts.FirstOrDefault(p => p.Diary_log_column_Id == col.Id && p.Date == dateInTimeSpan);
				if (post is not null)
					num = Convert.ToInt32(post.Value);

				data.Add(num);
			}

			dataset.Data = data;
			datasets.Add(dataset);
		}

		chartData = new ChartData { Labels = dateStrings, Datasets = datasets };

		double total = allDatesSinceReg.Where(d => TimeFilter.FilterByTimePeriod(d, DateTime.Today, timeSpan)).Count();

		if (numCols.Where(c => checkBox[c.Id]).Count() != 0)
		{
			lineChartOptions.Scales.Y!.Min = numCols.Where(c => checkBox[c.Id]).Min(c => c.Value_range_min);
			lineChartOptions.Scales.Y.Max = numCols.Where(c => checkBox[c.Id]).Max(c => c.Value_range_max);
		}
	}
}

<style>
	.tracker-post {
		vertical-align: middle;
		background-color: ghostwhite;
		cursor: pointer;
		transition: background-color 0.3s;
	}

		.tracker-post:hover {
			background-color: powderblue;
		}
</style>