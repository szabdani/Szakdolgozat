@inherits DiaryCompBase

@using Bases
@using Models.Diaries
@using BlazorBootstrap

@if (isVisible)
{
    <div class="modal fade show" style="display:block" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add a new @diaryOrHabit</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Hide"></button>
                </div>
                <EditForm EditContext=editContext OnSubmit=OnRegisterColumn>
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="row">
                            <div class="col">
                                <div class="form-group row">
                                    <label class="col col-form-label">New @diaryOrHabit name:</label>
                                </div>
                                <div class="form-group row">
                                    <div class="col">
                                        <div class="col">
                                            <InputText class="form-control" @bind-Value=newCol.Name />
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <div class="col">
                                        <ValidationMessage For="@(() => newCol.Name)" />
                                    </div>
                                </div>
                            </div>
                            @if (!IsHabit)
                            {
                                <div class="form-group row">
                                    <div class="row">
                                        <label class="col col-form-label">How would you like to track:</label>
                                    </div>
                                    <div class="row">
                                        <div class="col">
                                            <InputSelect class="form-control" @bind-Value=newCol.Type>
                                                @foreach (DiaryColumnType dType in Enum.GetValues(typeof(DiaryColumnType)))
                                                {
                                                    @switch (dType)
                                                    {
                                                        case DiaryColumnType.Habit:
                                                            <option value="@dType">Select</option>
                                                            break;
                                                        case DiaryColumnType.Words:
                                                            <option value="@dType">By writing a message</option>
                                                            break;
                                                        case DiaryColumnType.NumberRange:
                                                            <option value="@dType">By rating it in a number system</option>
                                                            break;
                                                    }  
                                                }
                                            </InputSelect>
                                        </div>
                                    </div>
                                </div>
                                @if (newCol.Type.Equals(DiaryColumnType.NumberRange))
                                {
                                    <div class="form-group row">
                                        <div class="col">
                                            <label class="col col-form-label">Minimum:</label>
                                        </div>
                                        <div class="col">
                                            <div class="col">
                                                <NumberInput TValue="int" @bind-Value="@newCol.Value_range_min" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col">
                                            <label class="col col-form-label">Maximum:</label>
                                        </div>
                                        <div class="col">
                                            <div class="col">
                                                <NumberInput TValue="int" @bind-Value="@newCol.Value_range_max" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col">
                                            <ValidationMessage For="@(() => newCol.Value_range_max)" />
                                        </div>
                                    </div>
                                } 
                            }
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input type="submit" class="btn btn-warning flex-column" value="Enter" disabled="@(!IsHabit && newCol.Type == DiaryColumnType.Habit)" />
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string diaryOrHabit = "Diary column";
    private bool isVisible = false;

    private Diary_log_column newCol = new();
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    public NewDiaryColDialog()
    {
        editContext = new EditContext(newCol);
        messageStore = new ValidationMessageStore(editContext);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (IsHabit)
        {
            newCol.Type = DiaryColumnType.Habit;
            diaryOrHabit = "Habit";

            await InvokeAsync(StateHasChanged);
        } 
    }

    public async Task Show()
    {
        isVisible = true;
        await RefreshDiaryComps();
    }

    public async Task Hide()
    {
        isVisible = false;
        await RefreshDiaryComps();
    }

    private async Task OnRegisterColumn()
    {
        await AppState.ShowLoadingScreenWhileAwaiting(RegisterColumn);
    }

    private async Task RegisterColumn()
    {
        messageStore.Clear();
        if (editContext.Validate())
        {
            bool colNameUsed = false;

            foreach (var col in allCols)
            {
                if (col.Name.Equals(newCol.Name))
                {
                    colNameUsed = true;
                    break;
                }
            }

            if (colNameUsed)
            {
                messageStore.Add(() => newCol.Name, $"You already track this {diaryOrHabit}");
            }
            else
            {
                if (newCol.Type.Equals(DiaryColumnType.NumberRange) && (newCol.Value_range_min>newCol.Value_range_max))
                {
                    messageStore.Add(() => newCol.Value_range_max, "Min value can not be higher than max value.");
                }
                else
                {
                    newCol.Account_Id = AppState.CurrentUser.Id;

                    bool isCorrect = await DiaryManager.InsertDiaryCol(newCol);
                    if (isCorrect)
                    {
                        newCol = new Diary_log_column();
                        await Hide();
                    }
                    else
                        throw new Exception($"Sorry, we could not register your {diaryOrHabit}");
                } 
            }
        }
    }
}

