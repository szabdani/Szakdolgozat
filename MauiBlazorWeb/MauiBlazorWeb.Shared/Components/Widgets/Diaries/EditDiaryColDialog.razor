@inherits DiaryCompBase

@using Bases
@using Models.Diaries

@if (isVisible)
{
    <div class="modal fade show" style="display:block" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit @title</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Hide"></button>
                </div>
                <EditForm EditContext=editContext OnSubmit=OnEditCol>
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="row">
                            <div class="col">
                                <div class="form-group row">
                                    <label class="col col-form-label">@diaryOrHabit name:</label>
                                </div>
                                <div class="form-group row">
                                    <div class="col">
                                        <div class="col">
                                            <InputText class="form-control" @bind-Value=newCol.Name />
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <div class="col">
                                        <ValidationMessage For="@(() => newCol.Name)" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input type="submit" class="btn btn-warning flex-column" value="Edit" />
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string title = "";
    private string diaryOrHabit = "Diary column";
    private bool isVisible = false;

    private Diary_log_column newCol;
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    public EditDiaryColDialog()
    {
        newCol = new Diary_log_column();
        editContext = new EditContext(newCol);
        messageStore = new ValidationMessageStore(editContext);
    }

    public async Task Show(Diary_log_column col)
    {
        newCol = col;
        title = newCol.Name;
        isVisible = true;

        await RefreshDiaryComps();
    }
    public async Task Hide()
    {
        isVisible = false;
        await RefreshDiaryComps();
    }

    protected override async Task OnInitializedAsync()
    {
        if (IsHabit)
        {
            newCol.Type = DiaryColumnType.Habit;
            diaryOrHabit = "Habit";

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnEditCol()
    {
        await _appState.ShowLoadingScreenWhileAwaiting(EditCol);
    }

    private async Task EditCol()
    {
        messageStore.Clear();
        if (newCol.Name != "")
        {
            bool diaryNameUsed = false;

            foreach (var col in allCols)
            {
                if (col.Name.Equals(newCol.Name))
                {
                    diaryNameUsed = true;
                    break;
                }
            }
            if (diaryNameUsed)
            {
                messageStore.Add(() => newCol.Name, $"You already track this {diaryOrHabit}");
            }
            else
            {
                bool isCorrect = await _diaryManager.UpdateDiaryCol(newCol);
                if (isCorrect)
                {
                    newCol = new Diary_log_column();
                    await Hide();
                }
                else
                    throw new Exception($"Sorry, we could not edit {newCol.Name}");
            }
        }
    }
}

