@inherits DiaryCompBase

@using Bases
@using BlazorBootstrap

<div class="row">
	<div class="col">
		<div class="row">
			<div class="col">
				<label>Select Time Span:</label>
				<InputSelect class="form-control" @bind-Value="timeSpan" @bind-Value:after="@UpdateObserver">
					@foreach (var t in Enum.GetValues(typeof(TimeFilter.TimePeriod)))
					{
						<option value="@t">@t</option>
					}
				</InputSelect>
			</div>
		</div>
	</div>
	<div class="col">
		<div class="table-responsive">
			<table class="table w-auto float-end">
				<thead>
					<tr>
						<th>Habits</th>
						@foreach (var col in allHabitCols)
						{
							<th>@col.Name</th>
						}
					</tr>
				</thead>
				<tbody>
					<tr>
						<th>Show ?</th>
						@foreach (var col in allHabitCols)
						{
							<td class="tracker-post" @onclick="() => OnToggle(col.Id)">
								@(checkBox[col.Id] ? "X" : "")
							</td>
						}
					</tr>
				</tbody>
				<tfoot>
					<tr>
						<td colspan="@(allHabitCols.Count % 2 == 1 ? (allHabitCols.Count + 1)/2 : allHabitCols.Count/2 + 1)">
							<button class="btn btn-info w-100" value="Show" @onclick="CheckAll">Show All</button>
						</td>
						<td colspan="@(allHabitCols.Count % 2 == 1 ? (allHabitCols.Count + 1)/2 : allHabitCols.Count/2)">
							<button class="btn btn-info w-100" value="Show" @onclick="UnCheckAll">Hide All</button>
						</td>
					</tr>
				</tfoot>
			</table>
		</div>
	</div>
</div>
<div class="row">
	<div class="col">
		<BarChart @ref="barChart"/>
	</div>
</div>

@code {
	private bool isChartInit = false;
	private TimeFilter.TimePeriod timeSpan = new();
	private Dictionary<int, bool> checkBox = new();

	private BarChart barChart = new();
	private ChartData chartData = new();

	private BarChartOptions barChartOptions;

	public HabitChart()
	{
		IsHabit = true;

		barChartOptions = new BarChartOptions();
		barChartOptions.Responsive = true;

		barChartOptions.Scales = new Scales
		{
			X = new ChartAxes { Title = new ChartAxesTitle { Text = "Habits", Display = true } },
			Y = new ChartAxes { Title = new ChartAxesTitle { Text = "Times you did the habit", Display = true } }
		};

		barChartOptions.Plugins.Legend.Display = false;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			await barChart.InitializeAsync(chartData, barChartOptions);
			isChartInit = true;
			await UpdateTables();
		}
	}

	private async Task OnToggle(int id)
	{
		checkBox[id] = !checkBox[id];
		await UpdateTables();
	}

	private async Task CheckAll()
	{
		foreach (var key in checkBox.Keys.ToList())
		{
			checkBox[key] = true;
		}
		await UpdateTables();
	}

	private async Task UnCheckAll()
	{
		foreach (var key in checkBox.Keys.ToList())
		{
			checkBox[key] = false;
		}
		await UpdateTables();
	}

	protected override async Task UpdateTables()
	{
		await base.UpdateTables();

		foreach (var col in allHabitCols)
		{
			if (!checkBox.ContainsKey(col.Id))
			{
				checkBox[col.Id] = true;
			}
		}
		GenerateBarChartData();
		
		if (isChartInit)
			await barChart.UpdateAsync(chartData, barChartOptions);
	}

	private void GenerateBarChartData()
	{
		List<string> labels = new List<string>();
		List<double?> countTimes = new List<double?>();

		foreach (var col in allHabitCols.Where(c => checkBox[c.Id]))
		{
			double? count = 0;
			var posts = allHabitPosts.Where(p => p.Diary_log_column_Id == col.Id);

			count = posts.Where(p => p.Value == "X" && TimeFilter.FilterByTimePeriod(p.Date, DateTime.Today, timeSpan)).Count();

			labels.Add(col.Name);
			countTimes.Add(count);
		}


		var datasets = new List<IChartDataset>();
		var dataset1 = new BarChartDataset() { Data = countTimes };

		datasets.Add(dataset1);

		chartData = new ChartData{ Labels = labels, Datasets = datasets };

		double total = allDatesSinceReg.Where(d => TimeFilter.FilterByTimePeriod(d, DateTime.Today, timeSpan)).Count();
		barChartOptions.Scales.Y!.Max = total;
	}
}

<style>
	.tracker-post {
		vertical-align: middle;
		background-color: ghostwhite;
		cursor: pointer;
		transition: background-color 0.3s;
	}

		.tracker-post:hover {
			background-color: powderblue;
		}
</style>