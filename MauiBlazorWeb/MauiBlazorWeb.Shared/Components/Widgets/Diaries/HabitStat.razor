@inherits DiaryCompBase

@using Bases
@using Models.Diaries

<div class="row">
	<div class="col">
		<InputSelect class="form-control" @bind-Value=colId @bind-Value:after="@RefreshDiaryComps">
			<option value=0>Select a Habit</option>
			@foreach (var c in allCols)
			{
				<option value="@c.Id">@c.Name</option>
			}
		</InputSelect>
	</div>
</div>
@if (isColViewSet)
{
	<div class="row">
		<div class="col">
			<Calendar Title="@title" RerenderParent="RefreshDiaryComps" SpecialDates="doneDates" FirstDate="firstDate" OnDayClickAction="Toggle" @ref="calendar" />
		</div>
		<div class="col">
			<table class="table text-center" style="table-layout: fixed;">
				<thead>
					<tr>
						<th>Time span</th>
						<th>#</th>
						<th>%</th>
					</tr>
				</thead>
				<tbody>
					@foreach (TimePeriod timeSpan in Enum.GetValues(typeof(TimePeriod)))
					{
						<tr>
								@switch (timeSpan)
								{
									case TimePeriod.Week:
										<td>Last 7 days:</td>
									break;
								case TimePeriod.Month:
										<td>@calendar.CalendarDate.ToString("MMMM")</td>
									break;
									case TimePeriod.Year:
										<td>@calendar.CalendarDate.ToString("yyyy")</td>
									break;
								case TimePeriod.All:
										<td>All time</td>
									break;
								}
							<td>
								@numPer[timeSpan]
								/
								@totalPer[timeSpan]
							</td>
							<td>
								@((numPer[timeSpan] / (double)totalPer[timeSpan]).ToString("0.##%"))
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

@code {
	private string title = "-";
	private bool isColViewSet = false;
	private int colId = 0;

	private List<DateTime> doneDates;

	private Calendar calendar;

	private Dictionary<TimePeriod, int> numPer;
	private Dictionary<TimePeriod, int> totalPer;

	public HabitStat()
	{
		IsHabit = true;

		doneDates = new List<DateTime>();

		numPer = new Dictionary<TimePeriod, int>();
		totalPer = new Dictionary<TimePeriod, int>();

		foreach (TimePeriod timeSpan in Enum.GetValues(typeof(TimePeriod)))
		{
			numPer.Add(timeSpan, 0);
			totalPer.Add(timeSpan, 0);
		}

		calendar = new Calendar();
	}

	protected override async Task UpdateTables()
	{
		await base.UpdateTables();

		string? name = allCols.FirstOrDefault(c => c.Id == colId)?.Name;
		if (name is not null)
		{
			title = $"{name} Entries";

			var posts = allPosts.Where(p => p.Diary_log_column_Id == colId).ToList();
			doneDates = posts.Where(p => p.Value == "X").Select(p => p.Date).Distinct().ToList();

			foreach (TimePeriod timeSpan in Enum.GetValues(typeof(TimePeriod)))
			{
				numPer[timeSpan] = doneDates.Where(d => FilterPostsByTimePeriod(d, calendar.CalendarDate, timeSpan)).Count();
				totalPer[timeSpan] = allDatesSinceReg.Where(d => FilterPostsByTimePeriod(d, calendar.CalendarDate, timeSpan)).Count();
			}

			isColViewSet = true;
		}
		else
		{
			isColViewSet = false;
		}
	}

	private async Task Toggle(DateTime day)
	{
		await OnToggleHabitValue(colId, day);
	}
}
