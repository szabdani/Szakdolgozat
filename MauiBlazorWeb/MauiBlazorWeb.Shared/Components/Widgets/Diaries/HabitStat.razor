@inherits DiaryCompBase

@using Bases
@using Models.Diaries

<div class="row">
	<div class="col">
		<InputSelect class="form-control" @bind-Value=colId @bind-Value:after="@UpdateObserver">
			<option value=0>Select a Habit</option>
			@foreach (var c in allHabitCols)
			{
				<option value="@c.Id">@c.Name</option>
			}
		</InputSelect>
	</div>
</div>
@if (isColViewSet)
{
	<div class="row">
		<div class="col-auto">
			<Calendar Title="@title" RerenderParent="UpdateObserver" SpecialDates="doneDates" FirstDate="firstDate" OnDayClickAction="Toggle" @ref="calendar" />
		</div>
		<div class="col">
			<table class="table text-center" style="table-layout: fixed;">
				<thead>
					<tr>
						<th>Time span</th>
						<th>#</th>
						<th>%</th>
					</tr>
				</thead>
				<tbody>
					@foreach (TimeFilter.TimePeriod timeSpan in Enum.GetValues(typeof(TimeFilter.TimePeriod)))
					{
						<tr>
							@switch (timeSpan)
							{
								case TimeFilter.TimePeriod.Week:
									<td>Last 7 days:</td>
									break;
								case TimeFilter.TimePeriod.Month:
									<td>@calendar.CalendarDate.ToString("MMMM")</td>
									break;
								case TimeFilter.TimePeriod.Year:
									<td>@calendar.CalendarDate.ToString("yyyy")</td>
									break;
								case TimeFilter.TimePeriod.All:
									<td>All time</td>
									break;
							}
							<td>
								@numPer[timeSpan]
								/
								@totalPer[timeSpan]
							</td>
							<td>
								@((numPer[timeSpan] / (double)totalPer[timeSpan]).ToString("0.##%"))
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

@code {
	private string title = "-";
	private bool isColViewSet = false;
	private int colId = 0;

	private List<DateTime> doneDates = new();
	private Calendar calendar = new();

	private Dictionary<TimeFilter.TimePeriod, int> numPer = new();
	private Dictionary<TimeFilter.TimePeriod, int> totalPer = new();

	public HabitStat()
	{
		IsHabit = true;

		foreach (TimeFilter.TimePeriod timeSpan in Enum.GetValues(typeof(TimeFilter.TimePeriod)))
		{
			numPer.Add(timeSpan, 0);
			totalPer.Add(timeSpan, 0);
		}
	}

	protected override async Task UpdateTables()
	{
		await base.UpdateTables();

		string? name = allHabitCols.FirstOrDefault(c => c.Id == colId)?.Name;
		if (name is null)
			isColViewSet = false;
		else
		{
			title = $"{name} Entries";

			var posts = allHabitPosts.Where(p => p.Diary_log_column_Id == colId).ToList();
			doneDates = posts.Where(p => p.Value == "X").Select(p => p.Date).Distinct().ToList();

			foreach (TimeFilter.TimePeriod timeSpan in Enum.GetValues(typeof(TimeFilter.TimePeriod)))
			{
				var date = calendar.CalendarDate;
				if (timeSpan == TimeFilter.TimePeriod.Week)
					date = DateTime.Today;

				numPer[timeSpan] = doneDates.Where(d => TimeFilter.FilterByTimePeriod(d, date, timeSpan)).Count();
				totalPer[timeSpan] = allDatesSinceReg.Where(d => TimeFilter.FilterByTimePeriod(d, date, timeSpan)).Count();
			}

			isColViewSet = true;
		}

		await InvokeAsync(StateHasChanged);
	}

	private async Task Toggle(DateTime day)
	{
		await OnToggleHabitValue(colId, day);
	}
}
